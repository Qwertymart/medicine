package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	mqtt "github.com/eclipse/paho.mqtt.golang"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
type MedicalData struct {
	DeviceID string  `json:"device_id"`
	Value    float64 `json:"value"`
	Units    string  `json:"units"`
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
var messageHandler mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {
	var data MedicalData
	if err := json.Unmarshal(msg.Payload(), &data); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
		return
	}
	fmt.Printf("–ü–æ–ª—É—á–µ–Ω–æ: [–¢–æ–ø–∏–∫: %s] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %s, –ó–Ω–∞—á–µ–Ω–∏–µ: %.2f %s\n",
		msg.Topic(), data.DeviceID, data.Value, data.Units)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
var connectHandler mqtt.OnConnectHandler = func(client mqtt.Client) {
	fmt.Println("‚úì –°–ª—É—à–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MQTT")
	// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ —Ç–æ–ø–∏–∫–∏ –≤ medical/ctg/
	topic := "medical/ctg/#"
	token := client.Subscribe(topic, 1, messageHandler)
	token.Wait()
	fmt.Printf("üì¨ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ç–æ–ø–∏–∫: %s\n", topic)
	fmt.Println("üéß –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
}

var connectLostHandler mqtt.ConnectionLostHandler = func(client mqtt.Client, err error) {
	fmt.Printf("‚ö† –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ: %v\n", err)
}

func main() {
	fmt.Println("=== –°–õ–£–®–ê–¢–ï–õ–¨ –ú–ï–î–ò–¶–ò–ù–°–ö–ò–• –î–ê–ù–ù–´–• ===")

	opts := mqtt.NewClientOptions()
	opts.AddBroker("tcp://localhost:1883")
	opts.SetClientID(fmt.Sprintf("listener-%d", time.Now().Unix()))
	opts.OnConnect = connectHandler
	opts.OnConnectionLost = connectLostHandler
	opts.SetAutoReconnect(true)

	client := mqtt.NewClient(opts)
	if token := client.Connect(); token.Wait() && token.Error() != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT: %v", token.Error())
	}

	// –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)
	<-sigChan

	fmt.Println("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è...")
	client.Disconnect(250)
	fmt.Println("‚úÖ –°–ª—É—à–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
}
