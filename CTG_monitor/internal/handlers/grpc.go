// internal/handlers/grpc_streamer.go - –ó–ê–ú–ï–ù–ò–¢–¨ grpc.go
package handlers

import (
	"context"
	"fmt"
	"log"
	"sync"
	"time"

	pb "CTG_monitor/proto"
)

// GRPCStreamer —É–ø—Ä–∞–≤–ª—è–µ—Ç gRPC —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º –¥–∞–Ω–Ω—ã—Ö
type GRPCStreamer struct {
	pb.UnimplementedCTGStreamServiceServer

	// –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
	subscribers  map[string]*StreamSubscriber
	batchClients map[string]*BatchSubscriber
	mu           sync.RWMutex

	// –ö–∞–Ω–∞–ª—ã –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞
	batchBuffer map[string][]*pb.CTGDataResponse
	batchMu     sync.RWMutex
	batchTicker *time.Ticker

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
	ctx    context.Context
	cancel context.CancelFunc
	wg     sync.WaitGroup
}

// StreamSubscriber –ø–æ–¥–ø–∏—Å—á–∏–∫ –Ω–∞ –ø–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
type StreamSubscriber struct {
	ID        string
	DeviceIDs []string
	DataTypes []string
	Channel   chan *pb.CTGDataResponse
	Stream    pb.CTGStreamService_StreamCTGDataServer
	Context   context.Context
}

// BatchSubscriber –ø–æ–¥–ø–∏—Å—á–∏–∫ –Ω–∞ –±–∞—Ç—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
type BatchSubscriber struct {
	ID        string
	DeviceIDs []string
	Channel   chan []*pb.CTGDataResponse
	Stream    pb.CTGStreamService_StreamBatchCTGDataServer
	Context   context.Context
}

// NewGRPCStreamer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º–µ—Ä
func NewGRPCStreamer() *GRPCStreamer {
	ctx, cancel := context.WithCancel(context.Background())

	streamer := &GRPCStreamer{
		subscribers:  make(map[string]*StreamSubscriber),
		batchClients: make(map[string]*BatchSubscriber),
		batchBuffer:  make(map[string][]*pb.CTGDataResponse),
		batchTicker:  time.NewTicker(4 * time.Minute),
		ctx:          ctx,
		cancel:       cancel,
	}

	// –ó–∞–ø—É—Å–∫ –±–∞—Ç—á–µ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
	streamer.wg.Add(1)
	go streamer.batchProcessor()

	log.Println("üåä gRPC Streamer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	return streamer
}

// StreamCTGData –ø–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –ö–¢–ì
func (gs *GRPCStreamer) StreamCTGData(req *pb.StreamRequest, stream pb.CTGStreamService_StreamCTGDataServer) error {
	clientID := fmt.Sprintf("stream_client_%d", time.Now().UnixNano())
	log.Printf("üîå –ù–æ–≤—ã–π –ø–æ—Ç–æ–∫–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: %s, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %v", clientID, req.DeviceIds)

	// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
	subscriber := &StreamSubscriber{
		ID:        clientID,
		DeviceIDs: req.DeviceIds,
		DataTypes: req.DataTypes,
		Channel:   make(chan *pb.CTGDataResponse, 2000),
		Stream:    stream,
		Context:   stream.Context(),
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
	gs.mu.Lock()
	gs.subscribers[clientID] = subscriber
	gs.mu.Unlock()

	// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
	defer func() {
		gs.mu.Lock()
		delete(gs.subscribers, clientID)
		close(subscriber.Channel)
		gs.mu.Unlock()
		log.Printf("üîå –ü–æ—Ç–æ–∫–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: %s", clientID)
	}()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
	for {
		select {
		case data := <-subscriber.Channel:
			if gs.shouldSendData(data, req) {
				if err := stream.Send(data); err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É %s: %v", clientID, err)
					return err
				}
			}
		case <-subscriber.Context.Done():
			log.Printf("üõë –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: %s", clientID)
			return subscriber.Context.Err()
		}
	}
}

// StreamBatchCTGData –±–∞—Ç—á–µ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—ã–µ 4 –º–∏–Ω—É—Ç—ã)
func (gs *GRPCStreamer) StreamBatchCTGData(req *pb.StreamRequest, stream pb.CTGStreamService_StreamBatchCTGDataServer) error {
	clientID := fmt.Sprintf("batch_client_%d", time.Now().UnixNano())
	log.Printf("üì¶ –ù–æ–≤—ã–π –±–∞—Ç—á–µ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: %s, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %v", clientID, req.DeviceIds)

	// –°–æ–∑–¥–∞–µ–º –±–∞—Ç—á–µ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
	subscriber := &BatchSubscriber{
		ID:        clientID,
		DeviceIDs: req.DeviceIds,
		Channel:   make(chan []*pb.CTGDataResponse, 100),
		Stream:    stream,
		Context:   stream.Context(),
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
	gs.mu.Lock()
	gs.batchClients[clientID] = subscriber
	gs.mu.Unlock()

	// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
	defer func() {
		gs.mu.Lock()
		delete(gs.batchClients, clientID)
		close(subscriber.Channel)
		gs.mu.Unlock()
		log.Printf("üì¶ –ë–∞—Ç—á–µ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: %s", clientID)
	}()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞—Ç—á–µ–π
	for {
		select {
		case batch := <-subscriber.Channel:
			batchResponse := &pb.CTGBatchResponse{
				Data:      batch,
				Timestamp: time.Now().Unix(),
				Count:     int32(len(batch)),
			}

			if err := stream.Send(batchResponse); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞—Ç—á–∞ –∫–ª–∏–µ–Ω—Ç—É %s: %v", clientID, err)
				return err
			}

			log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–∞—Ç—á –∫–ª–∏–µ–Ω—Ç—É %s: %d —Ç–æ—á–µ–∫", clientID, len(batch))

		case <-subscriber.Context.Done():
			log.Printf("üõë –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–∞—Ç—á–µ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: %s", clientID)
			return subscriber.Context.Err()
		}
	}
}

// BroadcastCTGData —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
func (gs *GRPCStreamer) BroadcastCTGData(data *pb.CTGDataResponse) {
	gs.mu.RLock()
	defer gs.mu.RUnlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
	for clientID, subscriber := range gs.subscribers {
		select {
		case subscriber.Channel <- data:
		default:
			log.Printf("‚ö†Ô∏è –ö–∞–Ω–∞–ª –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ %s –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω", clientID)
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á–µ–≤—ã–π –±—É—Ñ–µ—Ä
	gs.batchMu.Lock()
	deviceKey := data.DeviceId
	gs.batchBuffer[deviceKey] = append(gs.batchBuffer[deviceKey], data)
	gs.batchMu.Unlock()
}

// BroadcastBatch –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞—Ç—á –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
func (gs *GRPCStreamer) BroadcastBatch(deviceID string, batch []*pb.CTGDataResponse) {
	gs.mu.RLock()
	defer gs.mu.RUnlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–µ–≤—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
	for clientID, subscriber := range gs.batchClients {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
		if len(subscriber.DeviceIDs) == 0 || gs.containsDevice(subscriber.DeviceIDs, deviceID) {
			select {
			case subscriber.Channel <- batch:
			default:
				log.Printf("‚ö†Ô∏è –ö–∞–Ω–∞–ª –±–∞—Ç—á–µ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ %s –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω", clientID)
			}
		}
	}
}

// batchProcessor –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–∞—Ç—á–∏ –∫–∞–∂–¥—ã–µ 4 –º–∏–Ω—É—Ç—ã
func (gs *GRPCStreamer) batchProcessor() {
	defer gs.wg.Done()

	for {
		select {
		case <-gs.batchTicker.C:
			gs.processBatches()
		case <-gs.ctx.Done():
			// –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π
			gs.processBatches()
			log.Println("üõë Batch processor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		}
	}
}

// processBatches –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–∞—Ç—á–∏
func (gs *GRPCStreamer) processBatches() {
	gs.batchMu.Lock()
	defer gs.batchMu.Unlock()

	totalPoints := 0
	deviceCount := 0

	for deviceID, batch := range gs.batchBuffer {
		if len(batch) > 0 {
			gs.BroadcastBatch(deviceID, batch)
			totalPoints += len(batch)
			deviceCount++
		}
	}

	// –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
	gs.batchBuffer = make(map[string][]*pb.CTGDataResponse)

	if totalPoints > 0 {
		log.Printf("üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –±–∞—Ç—á–∏: %d —Ç–æ—á–µ–∫ –¥–ª—è %d —É—Å—Ç—Ä–æ–π—Å—Ç–≤", totalPoints, deviceCount)
	}
}

// shouldSendData –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É
func (gs *GRPCStreamer) shouldSendData(data *pb.CTGDataResponse, req *pb.StreamRequest) bool {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	if len(req.DeviceIds) > 0 && !gs.containsDevice(req.DeviceIds, data.DeviceId) {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
	if len(req.DataTypes) > 0 && !gs.containsDataType(req.DataTypes, data.DataType) {
		return false
	}

	return true
}

// containsDevice –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–µ
func (gs *GRPCStreamer) containsDevice(devices []string, deviceID string) bool {
	for _, device := range devices {
		if device == deviceID {
			return true
		}
	}
	return false
}

// containsDataType –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ
func (gs *GRPCStreamer) containsDataType(dataTypes []string, dataType string) bool {
	for _, dt := range dataTypes {
		if dt == dataType {
			return true
		}
	}
	return false
}

// GetSubscriberCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
func (gs *GRPCStreamer) GetSubscriberCount() (int, int) {
	gs.mu.RLock()
	defer gs.mu.RUnlock()
	return len(gs.subscribers), len(gs.batchClients)
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–µ—Ä
func (gs *GRPCStreamer) Stop() {
	log.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ gRPC Streamer...")
	gs.cancel()
	gs.batchTicker.Stop()
	gs.wg.Wait()
	log.Println("‚úÖ gRPC Streamer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
