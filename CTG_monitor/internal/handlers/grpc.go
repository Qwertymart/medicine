package handlers

import (
	_ "context"
	"fmt"
	"log"
	_ "net"
	"sync"
	"time"

	_ "CTG_monitor/internal/models"
	pb "CTG_monitor/proto"
)

// CTGStreamServer –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è gRPC —Å–µ—Ä–≤–µ—Ä–∞
type CTGStreamServer struct {
	pb.UnimplementedCTGStreamServiceServer

	// –ö–∞–Ω–∞–ª—ã –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
	subscribers map[string]chan *pb.CTGDataResponse
	mu          sync.RWMutex
}

// NewCTGStreamServer —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
func NewCTGStreamServer() *CTGStreamServer {
	return &CTGStreamServer{
		subscribers: make(map[string]chan *pb.CTGDataResponse),
	}
}

// StreamCTGData —Å—Ç—Ä–∏–º–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ö–¢–ì (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è)
func (s *CTGStreamServer) StreamCTGData(req *pb.StreamRequest, stream pb.CTGStreamService_StreamCTGDataServer) error {
	clientID := fmt.Sprintf("client_%d", time.Now().UnixNano())
	log.Printf("üåä –ù–æ–≤—ã–π —Å—Ç—Ä–∏–º–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç: %s, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %v", clientID, req.DeviceIds)

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
	clientChan := make(chan *pb.CTGDataResponse, 1000)

	s.mu.Lock()
	s.subscribers[clientID] = clientChan
	s.mu.Unlock()

	// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
	defer func() {
		s.mu.Lock()
		delete(s.subscribers, clientID)
		close(clientChan)
		s.mu.Unlock()
		log.Printf("üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: %s", clientID)
	}()

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É
	for {
		select {
		case data := <-clientChan:
			// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º –∏ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
			if s.shouldSendData(data, req) {
				if err := stream.Send(data); err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É %s: %v", clientID, err)
					return err
				}
			}

		case <-stream.Context().Done():
			log.Printf("üõë –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç—Ä–∏–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: %s", clientID)
			return stream.Context().Err()
		}
	}
}

// shouldSendData –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É
func (s *CTGStreamServer) shouldSendData(data *pb.CTGDataResponse, req *pb.StreamRequest) bool {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	if len(req.DeviceIds) > 0 {
		found := false
		for _, deviceID := range req.DeviceIds {
			if data.DeviceId == deviceID {
				found = true
				break
			}
		}
		if !found {
			return false
		}
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
	if len(req.DataTypes) > 0 {
		found := false
		for _, dataType := range req.DataTypes {
			if data.DataType == dataType {
				found = true
				break
			}
		}
		if !found {
			return false
		}
	}

	return true
}

// BroadcastCTGData —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
func (s *CTGStreamServer) BroadcastCTGData(data *pb.CTGDataResponse) {
	s.mu.RLock()
	defer s.mu.RUnlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
	for clientID, ch := range s.subscribers {
		select {
		case ch <- data:
			// –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
		default:
			// –ö–∞–Ω–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			log.Printf("‚ö†Ô∏è –ö–∞–Ω–∞–ª –∫–ª–∏–µ–Ω—Ç–∞ %s –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ", clientID)
		}
	}
}
