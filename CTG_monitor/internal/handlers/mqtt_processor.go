// internal/handlers/mqtt_stream_processor.go - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
package handlers

import (
	"context"
	"encoding/json"
	"github.com/google/uuid"
	"log"
	"strings"
	"sync"
	"time"

	"CTG_monitor/internal/models"
	pb "CTG_monitor/proto"
	mqtt "github.com/eclipse/paho.mqtt.golang"
)

// MQTTStreamProcessor –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç MQTT
type MQTTStreamProcessor struct {
	// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	sessionManager *SessionManager
	grpcStreamer   *GRPCStreamer
	dataBuffer     *DataBuffer

	// –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
	dataChannel chan *models.MedicalData
	grpcChannel chan *pb.CTGDataResponse

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
	ctx    context.Context
	cancel context.CancelFunc
	wg     sync.WaitGroup
	mu     sync.RWMutex
}

// NewMQTTStreamProcessor —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func NewMQTTStreamProcessor(
	sessionManager *SessionManager,
	grpcStreamer *GRPCStreamer,
	dataBuffer *DataBuffer,
) *MQTTStreamProcessor {
	ctx, cancel := context.WithCancel(context.Background())

	processor := &MQTTStreamProcessor{
		sessionManager: sessionManager,
		grpcStreamer:   grpcStreamer,
		dataBuffer:     dataBuffer,
		dataChannel:    make(chan *models.MedicalData, 1000),
		grpcChannel:    make(chan *pb.CTGDataResponse, 1000),
		ctx:            ctx,
		cancel:         cancel,
	}

	// –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
	processor.wg.Add(3)
	go processor.dataWorker()   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	go processor.grpcWorker()   // gRPC —Å—Ç—Ä–∏–º–∏–Ω–≥
	go processor.bufferWorker() // –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è

	log.Println("üöÄ MQTT Stream Processor –∑–∞–ø—É—â–µ–Ω")
	return processor
}

// HandleIncomingMQTT –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ MQTT —Å–æ–æ–±—â–µ–Ω–∏–π
func (p *MQTTStreamProcessor) HandleIncomingMQTT(topic string, payload []byte) {
	// –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ø–∏–∫–∞: medical/ctg/{datatype}/{deviceID}
	parts := strings.Split(topic, "/")
	if len(parts) != 4 {
		log.Printf("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–ø–∏–∫–∞: %s", topic)
		return
	}

	dataType := parts[2]

	// –ü–∞—Ä—Å–∏–Ω–≥ JSON
	var data models.MedicalData
	if err := json.Unmarshal(payload, &data); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MQTT payload: %v", err)
		return
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑ —Ç–æ–ø–∏–∫–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
	data.DeviceID = p.sessionManager.GetAllDevices()[0]
	if data.DataType == "" {
		data.DataType = dataType
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
	select {
	case p.dataChannel <- &data:
	default:
		log.Printf("‚ö†Ô∏è –ö–∞–Ω–∞–ª –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
	}
}

// MessageHandler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ MQTT —Å–æ–æ–±—â–µ–Ω–∏–π (–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
func MessageHandler(client mqtt.Client, msg mqtt.Message) {
	// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
	// –í main.go –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
	log.Printf("üì° MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: %s", msg.Topic())
}

// dataWorker –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
func (p *MQTTStreamProcessor) dataWorker() {
	defer p.wg.Done()

	for {
		select {
		case data := <-p.dataChannel:
			p.processData(data)
		case <-p.ctx.Done():
			log.Println("üõë Data worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		}
	}
}

// processData –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö
func (p *MQTTStreamProcessor) processData(data *models.MedicalData) {
	// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
	session := p.sessionManager.GetActiveSession(data.DeviceID)
	if session == nil {
		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ–π
		cardID := uuid.New() // –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
		var err error
		session, err = p.sessionManager.StartSession(cardID, data.DeviceID)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Å–µ—Å—Å–∏–∏ –¥–ª—è %s: %v", data.DeviceID, err)
			return
		}
		log.Printf("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s", data.DeviceID)
	}

	// 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
	if !p.isValidData(data) {
		data.Value = -1 // –ú–∞—Ä–∫–µ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	}

	// 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ gRPC —Å—Ç—Ä–∏–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º)
	grpcData := &pb.CTGDataResponse{
		DeviceId: data.DeviceID,
		DataType: data.DataType,
		Value:    data.Value,
		TimeSec:  data.TimeSec,
	}

	select {
	case p.grpcChannel <- grpcData:
	default:
		log.Printf("‚ö†Ô∏è gRPC –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s", data.DeviceID)
	}

	// 4. –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
	p.dataBuffer.AddDataPoint(session.ID, data.DataType, data.Value, data.TimeSec)
}

// grpcWorker –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ gRPC —Å—Ç—Ä–∏–º
func (p *MQTTStreamProcessor) grpcWorker() {
	defer p.wg.Done()

	// –ë—É—Ñ–µ—Ä –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ 4 –º–∏–Ω—É—Ç—ã
	batchBuffer := make([]*pb.CTGDataResponse, 0, 1000)
	batchTimer := time.NewTimer(4 * time.Minute)

	for {
		select {
		case data := <-p.grpcChannel:
			// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
			p.grpcStreamer.BroadcastCTGData(data)

			// –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á –±—É—Ñ–µ—Ä
			batchBuffer = append(batchBuffer, data)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –µ—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
			if len(batchBuffer) >= 100 {
				p.sendBatch(batchBuffer)
				batchBuffer = batchBuffer[:0]
				batchTimer.Reset(4 * time.Minute)
			}

		case <-batchTimer.C:
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±–∞—Ç—á –ø–æ —Ç–∞–π–º–µ—Ä—É
			if len(batchBuffer) > 0 {
				p.sendBatch(batchBuffer)
				batchBuffer = batchBuffer[:0]
			}
			batchTimer.Reset(4 * time.Minute)

		case <-p.ctx.Done():
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
			if len(batchBuffer) > 0 {
				p.sendBatch(batchBuffer)
			}
			log.Println("üõë gRPC worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		}
	}
}

// bufferWorker –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Ñ–ª–∞—à–∏—Ç –±—É—Ñ–µ—Ä –≤ –ë–î
func (p *MQTTStreamProcessor) bufferWorker() {
	defer p.wg.Done()

	ticker := time.NewTicker(5 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			p.dataBuffer.FlushAll()
		case <-p.ctx.Done():
			// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–ª–∞—à
			p.dataBuffer.FlushAll()
			log.Println("üõë Buffer worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		}
	}
}

// sendBatch –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞—Ç—á –¥–∞–Ω–Ω—ã—Ö –≤ gRPC
func (p *MQTTStreamProcessor) sendBatch(batch []*pb.CTGDataResponse) {
	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
	deviceBatches := make(map[string][]*pb.CTGDataResponse)
	for _, data := range batch {
		deviceBatches[data.DeviceId] = append(deviceBatches[data.DeviceId], data)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	for _, deviceBatch := range deviceBatches {
		for _, data := range deviceBatch {
			p.grpcStreamer.BroadcastCTGData(data)
		}
	}

	log.Printf("üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–∞—Ç—á –¥–∞–Ω–Ω—ã—Ö: %d —Ç–æ—á–µ–∫ –¥–ª—è %d —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
		len(batch), len(deviceBatches))
}

// isValidData –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
func (p *MQTTStreamProcessor) isValidData(data *models.MedicalData) bool {
	switch data.DataType {
	case "fetal_heart_rate":
		return data.Value >= 50 && data.Value <= 220
	case "uterine_contractions":
		return data.Value >= -5 && data.Value <= 150
	default:
		return true
	}
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
func (p *MQTTStreamProcessor) Stop() {
	log.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MQTT Stream Processor...")
	p.cancel()
	p.wg.Wait()
	close(p.dataChannel)
	close(p.grpcChannel)
	log.Println("‚úÖ MQTT Stream Processor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
