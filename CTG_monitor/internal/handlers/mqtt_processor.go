// internal/handlers/mqtt_stream_processor.go - –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –ï–î–ò–ù–ò–ß–ù–´–• –í–´–ë–†–û–°–û–í

package handlers

import (
	"context"
	"encoding/json"
	"github.com/google/uuid"
	"log"
	"math"
	"strings"
	"sync"
	"time"

	"CTG_monitor/internal/models"
	pb "CTG_monitor/proto"
	mqtt "github.com/eclipse/paho.mqtt.golang"
)

// SpikeDetectionFilter —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤
type SpikeDetectionFilter struct {
	// –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	fhrBuffer  []float64 // –ü–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–Ω–∞—á–µ–Ω–∏–π –ß–°–°
	ucBuffer   []float64 // –ü–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
	bufferSize int       // –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–π–∫–æ–≤
	spikeDeviation  float64 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–π–∫–∞
	contextWindow   int     // –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Å–æ—Å–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏)
	spikeConfidence float64 // –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–π–∫–∞

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	totalProcessed int
	spikesDetected int

	mu sync.RWMutex
}

// NewSpikeDetectionFilter —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å–ø–∞–π–∫–æ–≤
func NewSpikeDetectionFilter() *SpikeDetectionFilter {
	return &SpikeDetectionFilter{
		fhrBuffer:       make([]float64, 0, 20), // –ë—É—Ñ–µ—Ä –Ω–∞ 20 –∑–Ω–∞—á–µ–Ω–∏–π
		ucBuffer:        make([]float64, 0, 20),
		bufferSize:      20,
		spikeDeviation:  8.0, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ 8 –µ–¥–∏–Ω–∏—Ü –¥–ª—è —Å–ø–∞–π–∫–∞
		contextWindow:   3,   // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 3 —Ç–æ—á–∫–∏ –¥–æ –∏ –ø–æ—Å–ª–µ
		spikeConfidence: 0.7, // 70% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
	}
}

// MQTTStreamProcessor –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç MQTT
type MQTTStreamProcessor struct {
	// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	sessionManager *SessionManager
	grpcStreamer   *GRPCStreamer
	dataBuffer     *DataBuffer
	spikeFilter    *SpikeDetectionFilter

	// –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
	dataChannel chan *models.MedicalData
	grpcChannel chan *pb.CTGDataResponse

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
	ctx    context.Context
	cancel context.CancelFunc
	wg     sync.WaitGroup
	mu     sync.RWMutex
}

// NewMQTTStreamProcessor —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func NewMQTTStreamProcessor(
	sessionManager *SessionManager,
	grpcStreamer *GRPCStreamer,
	dataBuffer *DataBuffer,
) *MQTTStreamProcessor {
	ctx, cancel := context.WithCancel(context.Background())

	processor := &MQTTStreamProcessor{
		sessionManager: sessionManager,
		grpcStreamer:   grpcStreamer,
		dataBuffer:     dataBuffer,
		spikeFilter:    NewSpikeDetectionFilter(),
		dataChannel:    make(chan *models.MedicalData, 1000),
		grpcChannel:    make(chan *pb.CTGDataResponse, 1000),
		ctx:            ctx,
		cancel:         cancel,
	}

	// –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
	processor.wg.Add(3)
	go processor.dataWorker()   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	go processor.grpcWorker()   // gRPC —Å—Ç—Ä–∏–º–∏–Ω–≥
	go processor.bufferWorker() // –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è

	log.Println("üöÄ MQTT Stream Processor —Å–æ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ô —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω")
	return processor
}

// HandleIncomingMQTT –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ MQTT —Å–æ–æ–±—â–µ–Ω–∏–π
func (p *MQTTStreamProcessor) HandleIncomingMQTT(topic string, payload []byte) {
	// –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ø–∏–∫–∞: medical/ctg/{datatype}/{deviceID}
	parts := strings.Split(topic, "/")
	if len(parts) != 4 {
		log.Printf("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–ø–∏–∫–∞: %s", topic)
		return
	}

	dataType := parts[2]

	// –ü–∞—Ä—Å–∏–Ω–≥ JSON
	var data models.MedicalData
	if err := json.Unmarshal(payload, &data); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MQTT payload: %v", err)
		return
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑ —Ç–æ–ø–∏–∫–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
	data.DeviceID = p.sessionManager.GetAllDevices()[0]
	if data.DataType == "" {
		data.DataType = dataType
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
	select {
	case p.dataChannel <- &data:
	default:
		log.Printf("‚ö†Ô∏è –ö–∞–Ω–∞–ª –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
	}
}

// MessageHandler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ MQTT —Å–æ–æ–±—â–µ–Ω–∏–π (–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
func MessageHandler(client mqtt.Client, msg mqtt.Message) {
	log.Printf("üì° MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: %s", msg.Topic())
}

// dataWorker –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
func (p *MQTTStreamProcessor) dataWorker() {
	defer p.wg.Done()
	for {
		select {
		case data := <-p.dataChannel:
			p.processData(data)
		case <-p.ctx.Done():
			log.Println("üõë Data worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		}
	}
}

// processData –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Å–ø–∞–π–∫–æ–≤
func (p *MQTTStreamProcessor) processData(data *models.MedicalData) {
	// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
	session := p.sessionManager.GetActiveSession(data.DeviceID)
	if session == nil {
		cardID := uuid.New()
		var err error
		session, err = p.sessionManager.StartSession(cardID, data.DeviceID)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Å–µ—Å—Å–∏–∏ –¥–ª—è %s: %v", data.DeviceID, err)
			return
		}
		log.Printf("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s", data.DeviceID)
	}

	// 2. –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ï–î–ò–ù–ò–ß–ù–´–• –í–´–ë–†–û–°–û–í
	originalValue := data.Value

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã–±—Ä–æ—Å
	isSpike := p.spikeFilter.DetectSingleSpike(data.DataType, data.Value)

	if isSpike {
		// –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∞–π–∫ –Ω–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		interpolatedValue := p.spikeFilter.InterpolateValue(data.DataType)
		data.Value = interpolatedValue
		log.Printf("üéØ –ï–î–ò–ù–ò–ß–ù–´–ô –í–´–ë–†–û–° –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω %s: %.2f -> %.2f",
			data.DataType, originalValue, interpolatedValue)
	}

	// 3. –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
	if !p.isValidDataRange(data) {
		data.Value = -1
		log.Printf("‚õî –ó–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ %s: %.2f -> -1",
			data.DataType, originalValue)
	}

	// 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ gRPC —Å—Ç—Ä–∏–º
	grpcData := &pb.CTGDataResponse{
		DeviceId: data.DeviceID,
		DataType: data.DataType,
		Value:    data.Value,
		TimeSec:  data.TimeSec,
	}

	select {
	case p.grpcChannel <- grpcData:
	default:
		log.Printf("‚ö†Ô∏è gRPC –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s", data.DeviceID)
	}

	// 5. –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
	p.dataBuffer.AddDataPoint(session.ID, data.DataType, data.Value, data.TimeSec)
}

// DetectSingleSpike –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–∏—á–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã —Ç–∏–ø–∞ "30-30-30-50-30-30-30"
func (sf *SpikeDetectionFilter) DetectSingleSpike(dataType string, value float64) bool {
	sf.mu.Lock()
	defer sf.mu.Unlock()

	sf.totalProcessed++

	var buffer *[]float64
	switch dataType {
	case "fetal_heart_rate":
		buffer = &sf.fhrBuffer
	case "uterine_contractions":
		buffer = &sf.ucBuffer
	default:
		return false
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	*buffer = append(*buffer, value)
	if len(*buffer) > sf.bufferSize {
		*buffer = (*buffer)[1:]
	}

	// –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 7 —Ç–æ—á–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∞–π–∫–∞ (3 –¥–æ + —Å–ø–∞–π–∫ + 3 –ø–æ—Å–ª–µ)
	if len(*buffer) < 7 {
		return false
	}

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É (–ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é –≤ –±—É—Ñ–µ—Ä–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω—è—è - –Ω–æ–≤–∞—è)
	analyzeIndex := len(*buffer) - 2
	if analyzeIndex < sf.contextWindow {
		return false
	}

	currentValue := (*buffer)[analyzeIndex]

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏
	beforeValues := make([]float64, 0, sf.contextWindow)
	afterValues := make([]float64, 0, sf.contextWindow)

	// –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –î–û –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —Å–ø–∞–π–∫–∞
	for i := analyzeIndex - sf.contextWindow; i < analyzeIndex; i++ {
		if i >= 0 {
			beforeValues = append(beforeValues, (*buffer)[i])
		}
	}

	// –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ü–û–°–õ–ï –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —Å–ø–∞–π–∫–∞
	for i := analyzeIndex + 1; i <= analyzeIndex+sf.contextWindow && i < len(*buffer); i++ {
		afterValues = append(afterValues, (*buffer)[i])
	}

	// –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫
	if len(beforeValues) < 2 || len(afterValues) < 2 {
		return false
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ –∏ –ø–æ—Å–ª–µ
	beforeMean := sf.calculateMean(beforeValues)
	afterMean := sf.calculateMean(afterValues)
	contextMean := (beforeMean + afterMean) / 2.0

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	contextStd := sf.calculateStd(append(beforeValues, afterValues...), contextMean)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–π–∫–∞
	deviation := math.Abs(currentValue - contextMean)

	// –£—Å–ª–æ–≤–∏–µ 1: –ó–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	isDeviantFromContext := deviation > sf.spikeDeviation

	// –£—Å–ª–æ–≤–∏–µ 2: –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ –∏ –ø–æ—Å–ª–µ —Å–ø–∞–π–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã (–ø–æ—Ö–æ–∂–∏ –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞)
	beforeAfterDiff := math.Abs(beforeMean - afterMean)
	isContextStable := beforeAfterDiff < sf.spikeDeviation/2.0

	// –£—Å–ª–æ–≤–∏–µ 3: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)
	isStatisticallySignificant := true
	if contextStd > 0 {
		zScore := deviation / contextStd
		isStatisticallySignificant = zScore > 2.0 // 2-—Å–∏–≥–º–∞ –ø—Ä–∞–≤–∏–ª–æ
	}

	// –£—Å–ª–æ–≤–∏–µ 4: "–û—Å—Ç—Ä–æ–≤–Ω–æ–π" —Å–ø–∞–π–∫ - —Å–æ—Å–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ø–∞–π–∫–∞–º–∏
	isIsolatedSpike := sf.checkIsolation(beforeValues, afterValues, currentValue)

	isSpike := isDeviantFromContext && isContextStable && isStatisticallySignificant && isIsolatedSpike

	if isSpike {
		sf.spikesDetected++
		log.Printf("üéØ –î–ï–¢–ï–ö–¶–ò–Ø –°–ü–ê–ô–ö–ê %s:")
		log.Printf("   –ó–Ω–∞—á–µ–Ω–∏–µ: %.2f, –ö–æ–Ω—Ç–µ–∫—Å—Ç: %.2f (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: %.2f)")
		log.Printf("   –î–æ —Å–ø–∞–π–∫–∞: %.2f, –ü–æ—Å–ª–µ —Å–ø–∞–π–∫–∞: %.2f (—Ä–∞–∑–Ω–æ—Å—Ç—å: %.2f)")
		log.Printf("   Z-score: %.2f, –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: %v")

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		if sf.totalProcessed%100 == 0 {
			log.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: %d/%d (%.1f%% —Å–ø–∞–π–∫–æ–≤)",
				sf.spikesDetected, sf.totalProcessed,
				float64(sf.spikesDetected)/float64(sf.totalProcessed)*100)
		}
	}

	return isSpike
}

// InterpolateValue —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–ø–∞–π–∫–∞
func (sf *SpikeDetectionFilter) InterpolateValue(dataType string) float64 {
	sf.mu.RLock()
	defer sf.mu.RUnlock()

	var buffer []float64
	switch dataType {
	case "fetal_heart_rate":
		buffer = sf.fhrBuffer
	case "uterine_contractions":
		buffer = sf.ucBuffer
	default:
		return -1
	}

	if len(buffer) < 4 {
		return -1
	}

	// –ë–µ—Ä–µ–º 2 —Ç–æ—á–∫–∏ –¥–æ —Å–ø–∞–π–∫–∞ –∏ 2 —Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
	analyzeIndex := len(buffer) - 2 // –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ (—Å–ø–∞–π–∫)

	if analyzeIndex < 2 || analyzeIndex >= len(buffer)-2 {
		return -1
	}

	// –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
	beforeValue := buffer[analyzeIndex-1]
	afterValue := buffer[analyzeIndex+1]

	// –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
	interpolated := (beforeValue + afterValue) / 2.0

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥
	if analyzeIndex >= 3 && analyzeIndex < len(buffer)-2 {
		trendBefore := buffer[analyzeIndex-1] - buffer[analyzeIndex-2]
		trendAfter := buffer[analyzeIndex+2] - buffer[analyzeIndex+1]
		avgTrend := (trendBefore + trendAfter) / 2.0

		// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–Ω–¥–∞
		interpolated += avgTrend * 0.1 // –ù–µ–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ —Ç—Ä–µ–Ω–¥
	}

	return interpolated
}

// calculateMean –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func (sf *SpikeDetectionFilter) calculateMean(values []float64) float64 {
	if len(values) == 0 {
		return 0
	}

	sum := 0.0
	for _, v := range values {
		sum += v
	}
	return sum / float64(len(values))
}

// calculateStd –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
func (sf *SpikeDetectionFilter) calculateStd(values []float64, mean float64) float64 {
	if len(values) <= 1 {
		return 0
	}

	variance := 0.0
	for _, v := range values {
		variance += math.Pow(v-mean, 2)
	}
	return math.Sqrt(variance / float64(len(values)-1))
}

// checkIsolation –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ø–∞–π–∫ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º (—Å–æ—Å–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –Ω–µ —Å–ø–∞–π–∫–∏)
func (sf *SpikeDetectionFilter) checkIsolation(beforeValues, afterValues []float64, spikeValue float64) bool {
	if len(beforeValues) == 0 || len(afterValues) == 0 {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –Ω–µ –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è —Å–∏–ª—å–Ω–æ –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	lastBefore := beforeValues[len(beforeValues)-1]
	firstAfter := afterValues[0]

	// –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ —Å–ø–∞–π–∫–∞)
	allContext := append(beforeValues, afterValues...)
	contextMean := sf.calculateMean(allContext)

	// –°–æ—Å–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–ª–∏–∑–∫–∏ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
	beforeDeviation := math.Abs(lastBefore - contextMean)
	afterDeviation := math.Abs(firstAfter - contextMean)
	spikeDeviation := math.Abs(spikeValue - contextMean)

	// –°–ø–∞–π–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è –±–æ–ª—å—à–µ, —á–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏
	return beforeDeviation < spikeDeviation/2.0 && afterDeviation < spikeDeviation/2.0
}

// isValidDataRange –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
func (p *MQTTStreamProcessor) isValidDataRange(data *models.MedicalData) bool {
	switch data.DataType {
	case "fetal_heart_rate":
		return data.Value == -1 || (data.Value >= 50 && data.Value <= 220)
	case "uterine_contractions":
		return data.Value == -1 || (data.Value >= -5 && data.Value <= 150)
	default:
		return true
	}
}

// grpcWorker –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ gRPC —Å—Ç—Ä–∏–º
func (p *MQTTStreamProcessor) grpcWorker() {
	defer p.wg.Done()

	for {
		select {
		case data := <-p.grpcChannel:
			// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
			p.grpcStreamer.BroadcastCTGData(data)

		case <-p.ctx.Done():
			log.Println("üõë gRPC worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		}
	}
}

// bufferWorker –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Ñ–ª–∞—à–∏—Ç –±—É—Ñ–µ—Ä –≤ –ë–î
func (p *MQTTStreamProcessor) bufferWorker() {
	defer p.wg.Done()
	ticker := time.NewTicker(5 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			p.dataBuffer.FlushAll()
		case <-p.ctx.Done():
			// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–ª–∞—à
			p.dataBuffer.FlushAll()
			log.Println("üõë Buffer worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		}
	}
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
func (p *MQTTStreamProcessor) Stop() {
	log.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MQTT Stream Processor...")
	p.cancel()
	p.wg.Wait()
	close(p.dataChannel)
	close(p.grpcChannel)
	log.Println("‚úÖ MQTT Stream Processor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
