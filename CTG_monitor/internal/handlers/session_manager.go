// internal/handlers/session_manager.go - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
package handlers

import (
	"fmt"
	"log"
	"sync"
	"time"

	"CTG_monitor/internal/models"
	"github.com/google/uuid"
	"gorm.io/gorm"
)

// SessionManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Å—Å–∏–π –ö–¢–ì
type SessionManager struct {
	db             *gorm.DB
	activeSessions map[string]*models.CTGSession // deviceID -> session
	sessionsLock   sync.RWMutex
	dataBuffer     *DataBuffer

	// Callbacks –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö —Å–µ—Å—Å–∏–π
	onSessionStart func(session *models.CTGSession)
	onSessionStop  func(session *models.CTGSession)
}

// NewSessionManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
func NewSessionManager(db *gorm.DB, dataBuffer *DataBuffer) *SessionManager {
	manager := &SessionManager{
		db:             db,
		activeSessions: make(map[string]*models.CTGSession),
		dataBuffer:     dataBuffer,
	}

	log.Println("üë• Session Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	return manager
}

// SetCallbacks —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Å–µ—Å—Å–∏–π
func (sm *SessionManager) SetCallbacks(onStart, onStop func(session *models.CTGSession)) {
	sm.onSessionStart = onStart
	sm.onSessionStop = onStop
}

// StartSession —Å–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (sm *SessionManager) StartSession(cardID uuid.UUID, deviceID string) (*models.CTGSession, error) {
	sm.sessionsLock.Lock()
	defer sm.sessionsLock.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	if existing := sm.activeSessions[deviceID]; existing != nil {
		return nil, fmt.Errorf("–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s", deviceID)
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
	session := &models.CTGSession{
		ID:        uuid.New(),
		CardID:    cardID,
		DeviceID:  deviceID,
		StartTime: time.Now().UTC(),
		FHRData: models.CTGTimeSeries{
			Points:   []models.CTGPoint{},
			Count:    0,
			LastTime: 0,
		},
		UCData: models.CTGTimeSeries{
			Points:   []models.CTGPoint{},
			Count:    0,
			LastTime: 0,
		},
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	if err := sm.db.Create(session).Error; err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –≤ –ë–î: %w", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
	sm.activeSessions[deviceID] = session

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ —Å–µ—Å—Å–∏–∏
	if sm.onSessionStart != nil {
		sm.onSessionStart(session)
	}

	log.Printf("‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ —Å–µ—Å—Å–∏—è %s –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s, –∫–∞—Ä—Ç–∞ %s",
		session.ID.String(), deviceID, cardID.String())

	return session, nil
}

// StopSession –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
func (sm *SessionManager) StopSession(sessionID uuid.UUID) (*models.CTGSession, error) {
	sm.sessionsLock.Lock()
	defer sm.sessionsLock.Unlock()

	// –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
	var targetDeviceID string
	var targetSession *models.CTGSession

	for deviceID, session := range sm.activeSessions {
		if session.ID == sessionID {
			targetDeviceID = deviceID
			targetSession = session
			break
		}
	}

	if targetSession == nil {
		return nil, fmt.Errorf("–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", sessionID.String())
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	now := time.Now().UTC()
	targetSession.EndTime = &now

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
	if err := sm.db.Model(targetSession).Update("end_time", now).Error; err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ –ë–î: %w", err)
	}

	// –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
	delete(sm.activeSessions, targetDeviceID)

	// –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
	sm.dataBuffer.RemoveSessionBuffer(sessionID)

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
	if sm.onSessionStop != nil {
		sm.onSessionStop(targetSession)
	}

	log.Printf("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–µ—Å—Å–∏—è %s –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s", sessionID.String(), targetDeviceID)
	return targetSession, nil
}

// GetActiveSession –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
func (sm *SessionManager) GetActiveSession(deviceID string) *models.CTGSession {
	sm.sessionsLock.RLock()
	defer sm.sessionsLock.RUnlock()
	return sm.activeSessions[deviceID]
}

// GetAllActiveSessions –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
func (sm *SessionManager) GetAllActiveSessions() []*models.CTGSession {
	sm.sessionsLock.RLock()
	defer sm.sessionsLock.RUnlock()

	sessions := make([]*models.CTGSession, 0, len(sm.activeSessions))
	for _, session := range sm.activeSessions {
		sessions = append(sessions, session)
	}

	return sessions
}

// GetActiveSessionCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
func (sm *SessionManager) GetActiveSessionCount() int {
	sm.sessionsLock.RLock()
	defer sm.sessionsLock.RUnlock()
	return len(sm.activeSessions)
}

// GetSession –ø–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –∏–∑ –ë–î –ø–æ ID
func (sm *SessionManager) GetSession(sessionID uuid.UUID) (*models.CTGSession, error) {
	var session models.CTGSession
	if err := sm.db.First(&session, "id = ?", sessionID).Error; err != nil {
		return nil, err
	}
	return &session, nil
}

// GetSessionsByCardID –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç—ã
func (sm *SessionManager) GetSessionsByCardID(cardID uuid.UUID) ([]*models.CTGSession, error) {
	var sessions []*models.CTGSession
	if err := sm.db.Where("card_id = ?", cardID).
		Order("start_time DESC").
		Find(&sessions).Error; err != nil {
		return nil, err
	}
	return sessions, nil
}

// GetAllDevices –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –ë–î
func (sm *SessionManager) GetAllDevices() []string {
	var devices []string
	sm.db.Model(&models.CTGSession{}).
		Distinct("device_id").
		Pluck("device_id", &devices)
	return devices
}

// GetSessionStatistics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–π
func (sm *SessionManager) GetSessionStatistics() map[string]interface{} {
	stats := make(map[string]interface{})

	// –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
	activeSessions := sm.GetAllActiveSessions()
	stats["active_sessions_count"] = len(activeSessions)

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
	deviceStats := make(map[string]interface{})
	for _, session := range activeSessions {
		duration := time.Since(session.StartTime).Seconds()
		deviceStats[session.DeviceID] = map[string]interface{}{
			"session_id": session.ID.String(),
			"start_time": session.StartTime,
			"duration":   duration,
			"card_id":    session.CardID.String(),
		}
	}
	stats["devices"] = deviceStats

	// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –≤ –ë–î
	var totalSessions int64
	sm.db.Model(&models.CTGSession{}).Count(&totalSessions)
	stats["total_sessions"] = totalSessions

	return stats
}

// CleanupInactiveSessions –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –∑–∞–≤–∏—Å—à–∏–µ —Å–µ—Å—Å–∏–∏
func (sm *SessionManager) CleanupInactiveSessions() {
	sm.sessionsLock.Lock()
	defer sm.sessionsLock.Unlock()

	var sessionsToRemove []string
	threshold := time.Now().Add(-24 * time.Hour) // –°–µ—Å—Å–∏–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤

	for deviceID, session := range sm.activeSessions {
		if session.StartTime.Before(threshold) {
			// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
			now := time.Now().UTC()
			session.EndTime = &now
			sm.db.Model(session).Update("end_time", now)

			sessionsToRemove = append(sessionsToRemove, deviceID)
			log.Printf("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–≤–∏—Å—à–∞—è —Å–µ—Å—Å–∏—è: %s", session.ID.String())
		}
	}

	// –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å—à–∏–µ —Å–µ—Å—Å–∏–∏
	for _, deviceID := range sessionsToRemove {
		delete(sm.activeSessions, deviceID)
	}

	if len(sessionsToRemove) > 0 {
		log.Printf("üßπ –û—á–∏—â–µ–Ω–æ %d –∑–∞–≤–∏—Å—à–∏—Ö —Å–µ—Å—Å–∏–π", len(sessionsToRemove))
	}
}
