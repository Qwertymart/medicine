package handlers

import (
	"encoding/json"
	"fmt"
	"log"
	"math"

	"CTG_monitor/internal/models"
	pb "CTG_monitor/proto"
	mqtt "github.com/eclipse/paho.mqtt.golang"
)

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ gRPC —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
var grpcStreamServer *CTGStreamServer

// SetGRPCStreamServer —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ gRPC —Å–µ—Ä–≤–µ—Ä
func SetGRPCStreamServer(server *CTGStreamServer) {
	grpcStreamServer = server
}

// NoiseBuffer –±—É—Ñ–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
type NoiseBuffer struct {
	values   []float64
	maxSize  int
	dataType string
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
var (
	deviceBuffers = make(map[string]map[string]*NoiseBuffer)
)

// getOrCreateBuffer –ø–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –±—É—Ñ–µ—Ä –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
func getOrCreateBuffer(deviceID, dataType string) *NoiseBuffer {
	if deviceBuffers[deviceID] == nil {
		deviceBuffers[deviceID] = make(map[string]*NoiseBuffer)
	}

	if deviceBuffers[deviceID][dataType] == nil {
		deviceBuffers[deviceID][dataType] = &NoiseBuffer{
			values:   make([]float64, 0, 10),
			maxSize:  10, // —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
			dataType: dataType,
		}
	}

	return deviceBuffers[deviceID][dataType]
}

// addValue –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º -1)
func (nb *NoiseBuffer) addValue(value float64) {
	// –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º -1 –≤ –±—É—Ñ–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
	if value == -1 {
		return
	}

	if len(nb.values) >= nb.maxSize {
		// –°–¥–≤–∏–≥–∞–µ–º –±—É—Ñ–µ—Ä
		copy(nb.values, nb.values[1:])
		nb.values = nb.values[:nb.maxSize-1]
	}
	nb.values = append(nb.values, value)
}

// isValidValue –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–µ–ª—ã
func isValidValue(value float64, dataType string) bool {
	switch dataType {
	case "fetal_heart_rate":
		// –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è FHR
		return value >= 30 && value <= 300 && !math.IsNaN(value) && !math.IsInf(value, 0)

	case "uterine_contractions":
		// –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è UC - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏
		return value >= -10 && value <= 200 && !math.IsNaN(value) && !math.IsInf(value, 0)

	default:
		return !math.IsNaN(value) && !math.IsInf(value, 0)
	}
}

// isCriticalAnomaly –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏
func isCriticalAnomaly(value float64, dataType string) bool {
	switch dataType {
	case "fetal_heart_rate":
		// –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏
		return value < 50 || value > 250

	case "uterine_contractions":
		// –¢–æ–ª—å–∫–æ —è–≤–Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
		return value < -5 || value > 150

	default:
		return false
	}
}

// isMotionArtifact —É–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è
func (nb *NoiseBuffer) isMotionArtifact(newValue float64) bool {
	if len(nb.values) < 3 {
		return false // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	}

	lastValue := nb.values[len(nb.values)-1]
	jump := math.Abs(newValue - lastValue)

	switch nb.dataType {
	case "fetal_heart_rate":
		// –î–ª—è FHR: —Ä–µ–∑–∫–∏–π —Å–∫–∞—á–æ–∫ >80 —É–¥/–º–∏–Ω —Å—á–∏—Ç–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–º
		if jump > 80 {
			return true
		}

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∏—Ç –¥–∞–ª–µ–∫–æ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –Ω–µ–¥–∞–≤–Ω–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞
		if len(nb.values) >= 5 {
			recentMean := nb.getRecentMean(5)
			recentStd := nb.getRecentStd(5, recentMean)

			// –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª–µ–µ —á–µ–º –≤ 4 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
			if math.Abs(newValue-recentMean) > 4*recentStd && recentStd > 5 {
				return true
			}
		}

	case "uterine_contractions":
		// –î–ª—è UC: –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
		// –†–µ–∑–∫–∏–π —Å–∫–∞—á–æ–∫ >60 –º–º —Ä—Ç.—Å—Ç. –º–æ–∂–µ—Ç –±—ã—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–º
		if jump > 60 {
			return true
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å: UC –Ω–µ –º–æ–∂–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–¥–Ω—è—Ç—å—Å—è —Å 0 –¥–æ >50
		if lastValue < 10 && newValue > 50 && jump > 40 {
			return true
		}

	default:
		return false
	}

	return false
}

// getRecentMean –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö n –∑–Ω–∞—á–µ–Ω–∏–π
func (nb *NoiseBuffer) getRecentMean(n int) float64 {
	if len(nb.values) == 0 {
		return 0
	}

	start := len(nb.values) - n
	if start < 0 {
		start = 0
	}

	sum := 0.0
	count := 0
	for i := start; i < len(nb.values); i++ {
		sum += nb.values[i]
		count++
	}

	if count == 0 {
		return 0
	}
	return sum / float64(count)
}

// getRecentStd –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
func (nb *NoiseBuffer) getRecentStd(n int, mean float64) float64 {
	if len(nb.values) < 2 {
		return 0
	}

	start := len(nb.values) - n
	if start < 0 {
		start = 0
	}

	sum := 0.0
	count := 0
	for i := start; i < len(nb.values); i++ {
		diff := nb.values[i] - mean
		sum += diff * diff
		count++
	}

	if count < 2 {
		return 0
	}
	return math.Sqrt(sum / float64(count-1))
}

func MessageHandler(client mqtt.Client, msg mqtt.Message) {
	var data models.MedicalData
	if err := json.Unmarshal(msg.Payload(), &data); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
	buffer := getOrCreateBuffer(data.DeviceID, data.DataType)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	originalValue := data.Value
	isNoiseDetected := false
	noiseType := ""

	// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
	if !isValidValue(data.Value, data.DataType) {
		data.Value = -1
		isNoiseDetected = true
		noiseType = "INVALID_VALUE"
	} else if isCriticalAnomaly(data.Value, data.DataType) {
		// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏
		data.Value = -1
		isNoiseDetected = true
		noiseType = "CRITICAL_ANOMALY"
	} else if buffer.isMotionArtifact(data.Value) {
		// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –≤–∞–ª–∏–¥–Ω–æ)
		data.Value = -1
		isNoiseDetected = true
		noiseType = "MOTION_ARTIFACT"
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä (—Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç, –Ω–µ -1 –ª–∏ —ç—Ç–æ)
	buffer.addValue(data.Value)

	// –í—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
	switch data.DataType {
	case "fetal_heart_rate":
		if isNoiseDetected {
			fmt.Printf("BPM üö®: %.3f, %.2f (–±—ã–ª–æ: %.2f, –ø—Ä–∏—á–∏–Ω–∞: %s)\n",
				data.TimeSec, data.Value, originalValue, noiseType)
		} else {
			quality := "‚úÖ"
			// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
			if data.Value > 180 || data.Value < 100 {
				quality = "‚ö†Ô∏è"
			}
			fmt.Printf("BPM %s: %.3f, %.2f\n", quality, data.TimeSec, data.Value)
		}

	case "uterine_contractions":
		if isNoiseDetected {
			fmt.Printf("UTERUS üö®: %.3f, %.2f (–±—ã–ª–æ: %.2f, –ø—Ä–∏—á–∏–Ω–∞: %s)\n",
				data.TimeSec, data.Value, originalValue, noiseType)
		} else {
			quality := "‚úÖ"
			// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
			if data.Value > 80 {
				quality = "‚ö†Ô∏è"
			}
			fmt.Printf("UTERUS %s: %.3f, %.2f\n", quality, data.TimeSec, data.Value)
		}

	default:
		fmt.Printf("UNKNOWN TYPE: %s - %.3f, %.2f\n", data.DataType, data.TimeSec, data.Value)
	}

	// ‚≠ê –ì–õ–ê–í–ù–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –ë–ê–ó–û–í–´–ï –¥–∞–Ω–Ω—ã–µ –≤ gRPC —Å—Ç—Ä–∏–º
	if grpcStreamServer != nil {
		// –§–æ—Ä–º–∏—Ä—É–µ–º –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ï gRPC —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è)
		grpcData := &pb.CTGDataResponse{
			DeviceId: data.DeviceID,
			DataType: data.DataType,
			Value:    data.Value, // –í–∫–ª—é—á–∞—è -1!
			TimeSec:  data.TimeSec,
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ gRPC —Å—Ç—Ä–∏–º
		grpcStreamServer.BroadcastCTGData(grpcData)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏
	if isNoiseDetected && (noiseType == "CRITICAL_ANOMALY" || noiseType == "INVALID_VALUE") {
		log.Printf("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —à—É–º: —Ç–∏–ø=%s, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ=%s, –≤—Ä–µ–º—è=%.3f, –∑–Ω–∞—á–µ–Ω–∏–µ=%.2f, –ø—Ä–∏—á–∏–Ω–∞=%s",
			data.DataType, data.DeviceID, data.TimeSec, originalValue, noiseType)
	}
}
