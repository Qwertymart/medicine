// internal/handlers/data_buffer.go - –ó–ê–ú–ï–ù–ò–¢–¨ session_buffer.go
package handlers

import (
	"context"
	"encoding/json"
	"log"
	"strconv"
	"sync"
	"time"

	"CTG_monitor/internal/models"
	"github.com/google/uuid"
	"gorm.io/gorm"
)

// DataBuffer —É–ø—Ä–∞–≤–ª—è–µ—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
type DataBuffer struct {
	db             *gorm.DB
	sessionBuffers map[uuid.UUID]*SessionDataBuffer
	mu             sync.RWMutex
	ctx            context.Context
	cancel         context.CancelFunc
	wg             sync.WaitGroup
}

// SessionDataBuffer –±—É—Ñ–µ—Ä –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
type SessionDataBuffer struct {
	SessionID uuid.UUID
	FHRBuffer []models.CTGPoint
	UCBuffer  []models.CTGPoint
	LastFlush time.Time
	mu        sync.Mutex
}

// NewDataBuffer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã—Ö
func NewDataBuffer(db *gorm.DB) *DataBuffer {
	ctx, cancel := context.WithCancel(context.Background())

	buffer := &DataBuffer{
		db:             db,
		sessionBuffers: make(map[uuid.UUID]*SessionDataBuffer),
		ctx:            ctx,
		cancel:         cancel,
	}

	// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ñ–ª–∞—à–∞
	buffer.wg.Add(1)
	go buffer.autoFlushWorker()

	log.Println("Data Buffer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	return buffer
}

// AddDataPoint –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä
func (db *DataBuffer) AddDataPoint(sessionID uuid.UUID, dataType string, value, timeSec float64) {
	db.mu.RLock()
	sessionBuffer, exists := db.sessionBuffers[sessionID]
	db.mu.RUnlock()

	if !exists {
		db.mu.Lock()
		if sessionBuffer, exists = db.sessionBuffers[sessionID]; !exists {
			sessionBuffer = &SessionDataBuffer{
				SessionID: sessionID,
				FHRBuffer: make([]models.CTGPoint, 0, 500),
				UCBuffer:  make([]models.CTGPoint, 0, 500),
				LastFlush: time.Now(),
			}
			db.sessionBuffers[sessionID] = sessionBuffer
		}
		db.mu.Unlock()
	}

	sessionBuffer.mu.Lock()
	defer sessionBuffer.mu.Unlock()

	point := models.CTGPoint{
		T: timeSec,
		V: value,
	}

	switch dataType {
	case "fetal_heart_rate":
		sessionBuffer.FHRBuffer = append(sessionBuffer.FHRBuffer, point)
	case "uterine_contractions":
		sessionBuffer.UCBuffer = append(sessionBuffer.UCBuffer, point)
	}

	totalPoints := len(sessionBuffer.FHRBuffer) + len(sessionBuffer.UCBuffer)
	timeSinceFlush := time.Since(sessionBuffer.LastFlush)

	if totalPoints >= 100 || timeSinceFlush > 30*time.Second {
		go db.flushSessionAsync(sessionID)
	}
}

// FlushAll —Ñ–ª–∞—à–∏—Ç –≤—Å–µ –±—É—Ñ–µ—Ä—ã
func (db *DataBuffer) FlushAll() {
	db.mu.RLock()
	var sessionIDs []uuid.UUID
	for sessionID := range db.sessionBuffers {
		sessionIDs = append(sessionIDs, sessionID)
	}
	db.mu.RUnlock()

	for _, sessionID := range sessionIDs {
		db.flushSessionAsync(sessionID)
	}
}

// flushSessionAsync –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ñ–ª–∞—à–∏—Ç –±—É—Ñ–µ—Ä —Å–µ—Å—Å–∏–∏
func (db *DataBuffer) flushSessionAsync(sessionID uuid.UUID) {
	db.mu.RLock()
	sessionBuffer, exists := db.sessionBuffers[sessionID]
	db.mu.RUnlock()

	if !exists {
		return
	}

	sessionBuffer.mu.Lock()

	// –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–ª–∞—à–∞
	fhrPoints := make([]models.CTGPoint, len(sessionBuffer.FHRBuffer))
	copy(fhrPoints, sessionBuffer.FHRBuffer)
	ucPoints := make([]models.CTGPoint, len(sessionBuffer.UCBuffer))
	copy(ucPoints, sessionBuffer.UCBuffer)

	// –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
	sessionBuffer.FHRBuffer = sessionBuffer.FHRBuffer[:0]
	sessionBuffer.UCBuffer = sessionBuffer.UCBuffer[:0]
	sessionBuffer.LastFlush = time.Now()

	sessionBuffer.mu.Unlock()

	if len(fhrPoints) == 0 && len(ucPoints) == 0 {
		return
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
	if err := db.writeToDatabase(sessionID, fhrPoints, ucPoints); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è —Å–µ—Å—Å–∏–∏ %s: %v", sessionID, err)
	} else {
		log.Printf("üíæ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î: —Å–µ—Å—Å–∏—è %s, FHR=%d, UC=%d —Ç–æ—á–µ–∫",
			sessionID, len(fhrPoints), len(ucPoints))
	}
}

// writeToDatabase –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –ø–∞–∫–µ—Ç–Ω–æ
func (db *DataBuffer) writeToDatabase(sessionID uuid.UUID, fhrPoints, ucPoints []models.CTGPoint) error {
	updates := make(map[string]interface{})

	if len(fhrPoints) > 0 {
		fhrJSON, _ := json.Marshal(fhrPoints)
		// —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
		lastTimeStr := strconv.FormatFloat(fhrPoints[len(fhrPoints)-1].T, 'f', -1, 64)

		updates["fhr_data"] = gorm.Expr(
			`jsonb_set(
       jsonb_set(
         jsonb_set(fhr_data,
           '{points}', COALESCE(fhr_data->'points','[]'::jsonb)||?::jsonb),
         '{count}', (COALESCE((fhr_data->>'count')::int,0)+?)::text::jsonb),
       '{last_time}', ?::text::jsonb)`,
			string(fhrJSON),
			len(fhrPoints),
			lastTimeStr,
		)
	}

	if len(ucPoints) > 0 {
		ucJSON, _ := json.Marshal(ucPoints)
		lastTimeUC := strconv.FormatFloat(ucPoints[len(ucPoints)-1].T, 'f', -1, 64)

		updates["uc_data"] = gorm.Expr(
			`jsonb_set(
       jsonb_set(
         jsonb_set(uc_data,
           '{points}', COALESCE(uc_data->'points','[]'::jsonb) || ?::jsonb),
         '{count}', (COALESCE((uc_data->>'count')::int, 0) + ?)::text::jsonb),
       '{last_time}', ?::text::jsonb)`,
			string(ucJSON),
			len(ucPoints),
			lastTimeUC,
		)
	}

	return db.db.Model(&models.CTGSession{}).
		Where("id = ?", sessionID).
		Updates(updates).Error
}

// RemoveSessionBuffer —É–¥–∞–ª—è–µ—Ç –±—É—Ñ–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
func (db *DataBuffer) RemoveSessionBuffer(sessionID uuid.UUID) {
	db.mu.Lock()
	defer db.mu.Unlock()

	if _, exists := db.sessionBuffers[sessionID]; exists {
		// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–ª–∞—à –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
		go db.flushSessionAsync(sessionID)
		delete(db.sessionBuffers, sessionID)
		log.Printf("–£–¥–∞–ª–µ–Ω –±—É—Ñ–µ—Ä —Å–µ—Å—Å–∏–∏: %s", sessionID)
	}
}

// autoFlushWorker –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Ñ–ª–∞—à–∏—Ç —Å—Ç–∞—Ä—ã–µ –±—É—Ñ–µ—Ä—ã
func (db *DataBuffer) autoFlushWorker() {
	defer db.wg.Done()

	ticker := time.NewTicker(10 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			db.flushOldBuffers()
		case <-db.ctx.Done():
			db.finalFlush()
			log.Println("Auto flush worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		}
	}
}

// flushOldBuffers —Ñ–ª–∞—à–∏—Ç –±—É—Ñ–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ —Ñ–ª–∞—à–∏–ª–∏—Å—å
func (db *DataBuffer) flushOldBuffers() {
	db.mu.RLock()
	var sessionsToFlush []uuid.UUID

	for sessionID, sessionBuffer := range db.sessionBuffers {
		if time.Since(sessionBuffer.LastFlush) > 15*time.Second {
			sessionsToFlush = append(sessionsToFlush, sessionID)
		}
	}
	db.mu.RUnlock()

	for _, sessionID := range sessionsToFlush {
		go db.flushSessionAsync(sessionID)
	}
}

// finalFlush —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–ª–∞—à –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
func (db *DataBuffer) finalFlush() {
	log.Println("üîÑ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–ª–∞—à –±—É—Ñ–µ—Ä–æ–≤...")

	db.mu.RLock()
	var sessionIDs []uuid.UUID
	for sessionID := range db.sessionBuffers {
		sessionIDs = append(sessionIDs, sessionID)
	}
	db.mu.RUnlock()

	for _, sessionID := range sessionIDs {
		db.flushSessionAsync(sessionID)
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
	time.Sleep(2 * time.Second)
	log.Println("–§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–ª–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω")
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±—É—Ñ–µ—Ä
func (db *DataBuffer) Stop() {
	log.Println("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Data Buffer...")
	db.cancel()
	db.wg.Wait()
	log.Println("Data Buffer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
