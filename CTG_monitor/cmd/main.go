package main

import (
	"log"
	"net"
	"os"
	"os/signal"
	"syscall"

	"google.golang.org/grpc"

	"CTG_monitor/internal/handlers"
	"CTG_monitor/internal/mqtt_client"
	pb "CTG_monitor/proto"
)

func main() {
	log.Println("üè• === CTG MONITOR (gRPC + MQTT) ===")

	//------------------------------------
	// 1. gRPC-—Å–µ—Ä–≤–µ—Ä
	//------------------------------------
	grpcServer := grpc.NewServer()
	ctgSrv := handlers.NewCTGStreamServer()
	pb.RegisterCTGStreamServiceServer(grpcServer, ctgSrv)
	handlers.SetGRPCStreamServer(ctgSrv)

	go func() {
		lis, err := net.Listen("tcp", ":50051")
		if err != nil {
			log.Fatalf("‚ùå gRPC listener error: %v", err)
		}
		log.Println("üåä gRPC Stream Server –Ω–∞ :50051")
		if err := grpcServer.Serve(lis); err != nil {
			log.Fatalf("‚ùå gRPC server error: %v", err)
		}
	}()

	//------------------------------------
	// 2. MQTT-–∫–ª–∏–µ–Ω—Ç-—Å–ª—É—à–∞—Ç–µ–ª—å
	//------------------------------------
	mqttClient, err := mqtt_client.InitClient("tcp://localhost:1883")
	if err != nil {
		log.Fatalf("‚ùå MQTT init error: %v", err)
	}
	defer mqttClient.Disconnect(250)

	log.Println("üì° MQTT –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äì –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ MessageHandler")
	log.Println("üìà –ù–∞ —Ñ—Ä–æ–Ω—Ç —É—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û: device_id, data_type, value, time_sec")

	//------------------------------------
	// 3. Graceful shutdown
	//------------------------------------
	sig := make(chan os.Signal, 1)
	signal.Notify(sig, os.Interrupt, syscall.SIGTERM)

	log.Println("üöÄ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω ‚Üí Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
	<-sig

	log.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞‚Ä¶")
	grpcServer.GracefulStop()
	log.Println("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
}
