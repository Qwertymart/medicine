// main.go - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
package main

import (
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	_ "CTG_monitor/docs"
	mqtt "github.com/eclipse/paho.mqtt.golang"
	_ "github.com/swaggo/files"
	_ "github.com/swaggo/gin-swagger"
	"google.golang.org/grpc"

	"CTG_monitor/configs"
	"CTG_monitor/internal/database"
	"CTG_monitor/internal/handlers"
	pb "CTG_monitor/proto"
)

// @title CTG Monitor API
// @version 1.0
// @description API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ö–¢–ì (–∫–∞—Ä–¥–∏–æ—Ç–æ–∫–æ–≥—Ä–∞—Ñ–∏–∏). –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –ö–¢–ì.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support Team
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /api/v1

// @schemes http https

// @tag.name sessions
// @tag.description –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ö–¢–ì. –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å, –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

// @tag.name cards
// @tag.description –†–∞–±–æ—Ç–∞ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.

// @tag.name devices
// @tag.description –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –ö–¢–ì. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.

// @tag.name monitoring
// @tag.description –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
// @description API –∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)

func main() {
	log.Println("üè• === CTG MONITOR v2.0 (Stream Processing Architecture) ===")

	// 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg := configs.LoadConfig()
	log.Printf("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: DB=%s:%s, MQTT=%s",
		cfg.Database.Host, cfg.Database.Port, cfg.MQTT.Broker)

	// 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	db, err := database.InitDatabase(cfg)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: %v", err)
	}
	defer database.CloseDatabase()

	if err := database.RunMigrations(db); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: %v", err)
	}

	// 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	dataBuffer := handlers.NewDataBuffer(db)
	sessionManager := handlers.NewSessionManager(db, dataBuffer)
	grpcStreamer := handlers.NewGRPCStreamer()

	// 4. –°–æ–∑–¥–∞–Ω–∏–µ MQTT Stream Processor
	mqttProcessor := handlers.NewMQTTStreamProcessor(
		sessionManager,
		grpcStreamer,
		dataBuffer,
	)

	// 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MQTT –∫–ª–∏–µ–Ω—Ç–∞
	mqttClient, err := initMQTTWithAuth(cfg.MQTT)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ MQTT: %v", err)
	}
	defer mqttClient.Disconnect(250)

	// 6. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ MQTT —Ç–æ–ø–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
	messageHandler := func(client mqtt.Client, msg mqtt.Message) {
		mqttProcessor.HandleIncomingMQTT(msg.Topic(), msg.Payload())
	}

	topic := "medical/ctg/+/+" // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
	token := mqttClient.Subscribe(topic, byte(cfg.MQTT.QoS), messageHandler)
	if token.Wait() && token.Error() != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ MQTT: %v", token.Error())
	}

	log.Printf("üì° MQTT –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ %s, —Ç–æ–ø–∏–∫: %s",
		cfg.MQTT.Broker, topic)

	// 7. –ó–∞–ø—É—Å–∫ gRPC —Å–µ—Ä–≤–µ—Ä–∞
	grpcServer := grpc.NewServer()
	pb.RegisterCTGStreamServiceServer(grpcServer, grpcStreamer)

	go func() {
		lis, err := net.Listen("tcp", ":"+cfg.App.GRPCPort)
		if err != nil {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ gRPC listener: %v", err)
		}

		log.Printf("üåä gRPC Stream Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ :%s", cfg.App.GRPCPort)
		if err := grpcServer.Serve(lis); err != nil {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ gRPC —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	if err := handlers.InitMedicalRecordsClient("localhost:50052"); err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –º–µ–¥–∫–∞—Ä—Ç: %v", err)
		log.Println("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–µ–¥–∫–∞—Ä—Ç–∞–º–∏")
	}
	defer handlers.CloseMedicalRecordsClient()

	// 8. –ó–∞–ø—É—Å–∫ REST API —Å–µ—Ä–≤–µ—Ä–∞
	restAPI := handlers.NewRESTAPIServer(sessionManager, grpcStreamer, mqttProcessor)
	router := restAPI.SetupRoutes()

	go func() {
		log.Printf("üåê REST API Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ :%s", cfg.App.Port)
		if err := http.ListenAndServe(":"+cfg.App.Port, router); err != nil && err != http.ErrServerClosed {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	log.Println("üöÄ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω ‚Üí Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
	log.Println("üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞:")
	log.Println("   üì° MQTT ‚Üí üîÑ Stream Processor ‚Üí üåä gRPC Stream")
	log.Println("   üì° MQTT ‚Üí üîÑ Stream Processor ‚Üí üíæ Data Buffer ‚Üí üóÉÔ∏è Database")
	log.Println("   üåê REST API ‚Üí üë• Session Manager")

	// 9. Graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)
	<-sigChan

	log.Println("üõë Graceful shutdown...")

	// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	mqttProcessor.Stop()
	grpcStreamer.Stop()
	dataBuffer.Stop()
	grpcServer.GracefulStop()

	log.Println("‚úÖ –°–µ—Ä–≤–∏—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// initMQTTWithAuth –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç MQTT –∫–ª–∏–µ–Ω—Ç —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
func initMQTTWithAuth(mqttCfg configs.MQTTConfig) (mqtt.Client, error) {
	opts := mqtt.NewClientOptions()
	opts.AddBroker(mqttCfg.Broker)
	opts.SetClientID(mqttCfg.ClientID)

	if mqttCfg.Username != "" && mqttCfg.Password != "" {
		opts.SetUsername(mqttCfg.Username)
		opts.SetPassword(mqttCfg.Password)
		log.Printf("üîê MQTT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s", mqttCfg.Username)
	}

	opts.SetAutoReconnect(true)
	opts.SetCleanSession(true)
	opts.OnConnect = func(c mqtt.Client) {
		fmt.Println("‚úÖ MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω")
	}
	opts.OnConnectionLost = func(c mqtt.Client, err error) {
		log.Printf("‚ùå MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ: %v", err)
	}

	client := mqtt.NewClient(opts)
	if token := client.Connect(); token.Wait() && token.Error() != nil {
		return nil, fmt.Errorf("MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: %w", token.Error())
	}

	return client, nil
}
