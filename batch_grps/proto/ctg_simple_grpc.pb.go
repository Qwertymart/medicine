// proto/ctg_stream.proto - ДОБАВИТЬ или ЗАМЕНИТЬ существующий proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: ctg_simple.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CTGStreamService_StreamCTGData_FullMethodName      = "/ctg.CTGStreamService/StreamCTGData"
	CTGStreamService_StreamBatchCTGData_FullMethodName = "/ctg.CTGStreamService/StreamBatchCTGData"
)

// CTGStreamServiceClient is the client API for CTGStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CTGStreamServiceClient interface {
	// Потоковая передача данных КТГ (в реальном времени)
	StreamCTGData(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CTGDataResponse], error)
	// Батчевая передача данных КТГ (каждые 4 минуты)
	StreamBatchCTGData(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CTGBatchResponse], error)
}

type cTGStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCTGStreamServiceClient(cc grpc.ClientConnInterface) CTGStreamServiceClient {
	return &cTGStreamServiceClient{cc}
}

func (c *cTGStreamServiceClient) StreamCTGData(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CTGDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CTGStreamService_ServiceDesc.Streams[0], CTGStreamService_StreamCTGData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, CTGDataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CTGStreamService_StreamCTGDataClient = grpc.ServerStreamingClient[CTGDataResponse]

func (c *cTGStreamServiceClient) StreamBatchCTGData(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CTGBatchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CTGStreamService_ServiceDesc.Streams[1], CTGStreamService_StreamBatchCTGData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, CTGBatchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CTGStreamService_StreamBatchCTGDataClient = grpc.ServerStreamingClient[CTGBatchResponse]

// CTGStreamServiceServer is the server API for CTGStreamService service.
// All implementations must embed UnimplementedCTGStreamServiceServer
// for forward compatibility.
type CTGStreamServiceServer interface {
	// Потоковая передача данных КТГ (в реальном времени)
	StreamCTGData(*StreamRequest, grpc.ServerStreamingServer[CTGDataResponse]) error
	// Батчевая передача данных КТГ (каждые 4 минуты)
	StreamBatchCTGData(*StreamRequest, grpc.ServerStreamingServer[CTGBatchResponse]) error
	mustEmbedUnimplementedCTGStreamServiceServer()
}

// UnimplementedCTGStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCTGStreamServiceServer struct{}

func (UnimplementedCTGStreamServiceServer) StreamCTGData(*StreamRequest, grpc.ServerStreamingServer[CTGDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCTGData not implemented")
}
func (UnimplementedCTGStreamServiceServer) StreamBatchCTGData(*StreamRequest, grpc.ServerStreamingServer[CTGBatchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBatchCTGData not implemented")
}
func (UnimplementedCTGStreamServiceServer) mustEmbedUnimplementedCTGStreamServiceServer() {}
func (UnimplementedCTGStreamServiceServer) testEmbeddedByValue()                          {}

// UnsafeCTGStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CTGStreamServiceServer will
// result in compilation errors.
type UnsafeCTGStreamServiceServer interface {
	mustEmbedUnimplementedCTGStreamServiceServer()
}

func RegisterCTGStreamServiceServer(s grpc.ServiceRegistrar, srv CTGStreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedCTGStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CTGStreamService_ServiceDesc, srv)
}

func _CTGStreamService_StreamCTGData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CTGStreamServiceServer).StreamCTGData(m, &grpc.GenericServerStream[StreamRequest, CTGDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CTGStreamService_StreamCTGDataServer = grpc.ServerStreamingServer[CTGDataResponse]

func _CTGStreamService_StreamBatchCTGData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CTGStreamServiceServer).StreamBatchCTGData(m, &grpc.GenericServerStream[StreamRequest, CTGBatchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CTGStreamService_StreamBatchCTGDataServer = grpc.ServerStreamingServer[CTGBatchResponse]

// CTGStreamService_ServiceDesc is the grpc.ServiceDesc for CTGStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CTGStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ctg.CTGStreamService",
	HandlerType: (*CTGStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCTGData",
			Handler:       _CTGStreamService_StreamCTGData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamBatchCTGData",
			Handler:       _CTGStreamService_StreamBatchCTGData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ctg_simple.proto",
}
