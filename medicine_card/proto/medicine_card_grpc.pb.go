// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: medicine_card.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MedicalRecordsService_SaveCTGSession_FullMethodName = "/medical_records.MedicalRecordsService/SaveCTGSession"
)

// MedicalRecordsServiceClient is the client API for MedicalRecordsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с медицинскими записями
type MedicalRecordsServiceClient interface {
	// Отправка завершенной сессии КТГ
	SaveCTGSession(ctx context.Context, in *CTGSessionRequest, opts ...grpc.CallOption) (*SaveSessionResponse, error)
}

type medicalRecordsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicalRecordsServiceClient(cc grpc.ClientConnInterface) MedicalRecordsServiceClient {
	return &medicalRecordsServiceClient{cc}
}

func (c *medicalRecordsServiceClient) SaveCTGSession(ctx context.Context, in *CTGSessionRequest, opts ...grpc.CallOption) (*SaveSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveSessionResponse)
	err := c.cc.Invoke(ctx, MedicalRecordsService_SaveCTGSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicalRecordsServiceServer is the server API for MedicalRecordsService service.
// All implementations must embed UnimplementedMedicalRecordsServiceServer
// for forward compatibility.
//
// Сервис для работы с медицинскими записями
type MedicalRecordsServiceServer interface {
	// Отправка завершенной сессии КТГ
	SaveCTGSession(context.Context, *CTGSessionRequest) (*SaveSessionResponse, error)
	mustEmbedUnimplementedMedicalRecordsServiceServer()
}

// UnimplementedMedicalRecordsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMedicalRecordsServiceServer struct{}

func (UnimplementedMedicalRecordsServiceServer) SaveCTGSession(context.Context, *CTGSessionRequest) (*SaveSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCTGSession not implemented")
}
func (UnimplementedMedicalRecordsServiceServer) mustEmbedUnimplementedMedicalRecordsServiceServer() {}
func (UnimplementedMedicalRecordsServiceServer) testEmbeddedByValue()                               {}

// UnsafeMedicalRecordsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicalRecordsServiceServer will
// result in compilation errors.
type UnsafeMedicalRecordsServiceServer interface {
	mustEmbedUnimplementedMedicalRecordsServiceServer()
}

func RegisterMedicalRecordsServiceServer(s grpc.ServiceRegistrar, srv MedicalRecordsServiceServer) {
	// If the following call pancis, it indicates UnimplementedMedicalRecordsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MedicalRecordsService_ServiceDesc, srv)
}

func _MedicalRecordsService_SaveCTGSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTGSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordsServiceServer).SaveCTGSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordsService_SaveCTGSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordsServiceServer).SaveCTGSession(ctx, req.(*CTGSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedicalRecordsService_ServiceDesc is the grpc.ServiceDesc for MedicalRecordsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicalRecordsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "medical_records.MedicalRecordsService",
	HandlerType: (*MedicalRecordsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveCTGSession",
			Handler:    _MedicalRecordsService_SaveCTGSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medicine_card.proto",
}
