// –°–µ—Ä–≤–∏—Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∫–∞—Ä—Ç
// main.go
package main

import (
	"context"
	"log"
	"net"
	"os"
	"os/signal"
	"syscall"
	"time"

	"google.golang.org/grpc"
	medpb "medicine_card/proto"
)

// MedicalRecordsServer —Ä–µ–∞–ª–∏–∑—É–µ—Ç gRPC —Å–µ—Ä–≤–∏—Å –º–µ–¥–∫–∞—Ä—Ç
type MedicalRecordsServer struct {
	medpb.UnimplementedMedicalRecordsServiceServer
}

// SaveCTGSession –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ö–¢–ì
func (s *MedicalRecordsServer) SaveCTGSession(
	ctx context.Context,
	req *medpb.CTGSessionRequest,
) (*medpb.SaveSessionResponse, error) {

	log.Printf("üè• === –ü–û–õ–£–ß–ï–ù–ê –°–ï–°–°–ò–Ø –ö–¢–ì ===")
	log.Printf("üìã Session ID: %s", req.SessionId)
	log.Printf("üìã Card ID: %s", req.CardId)
	log.Printf("üìã Device ID: %s", req.DeviceId)
	log.Printf("üìã Start Time: %s", time.Unix(req.StartTime, 0).Format("2006-01-02 15:04:05"))
	log.Printf("üìã End Time: %s", time.Unix(req.EndTime, 0).Format("2006-01-02 15:04:05"))
	log.Printf("üìã Duration: %d —Å–µ–∫—É–Ω–¥", req.DurationSeconds)
	log.Printf("üìã FHR —Ç–æ—á–µ–∫: %d", req.TotalFhrPoints)
	log.Printf("üìã UC —Ç–æ—á–µ–∫: %d", req.TotalUcPoints)

	// –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ—á–µ–∫ FHR –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
	if len(req.FhrData) > 0 {
		log.Printf("üìä –ü–µ—Ä–≤—ã–µ FHR –¥–∞–Ω–Ω—ã–µ:")
		count := min(5, len(req.FhrData))
		for i := 0; i < count; i++ {
			point := req.FhrData[i]
			log.Printf("   FHR[%d]: –≤—Ä–µ–º—è=%.2fs, –∑–Ω–∞—á–µ–Ω–∏–µ=%.2f",
				i, point.TimeSec, point.Value)
		}
		if len(req.FhrData) > 5 {
			log.Printf("   ... –∏ –µ—â–µ %d —Ç–æ—á–µ–∫ FHR", len(req.FhrData)-5)
		}
	}

	// –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ—á–µ–∫ UC –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
	if len(req.UcData) > 0 {
		log.Printf("üìä –ü–µ—Ä–≤—ã–µ UC –¥–∞–Ω–Ω—ã–µ:")
		count := min(5, len(req.UcData))
		for i := 0; i < count; i++ {
			point := req.UcData[i]
			log.Printf("   UC[%d]: –≤—Ä–µ–º—è=%.2fs, –∑–Ω–∞—á–µ–Ω–∏–µ=%.2f",
				i, point.TimeSec, point.Value)
		}
		if len(req.UcData) > 5 {
			log.Printf("   ... –∏ –µ—â–µ %d —Ç–æ—á–µ–∫ UC", len(req.UcData)-5)
		}
	}

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
	if len(req.FhrData) > 0 {
		var fhrSum, fhrMin, fhrMax float64
		fhrMin = req.FhrData[0].Value
		fhrMax = req.FhrData[0].Value

		for _, point := range req.FhrData {
			fhrSum += point.Value
			if point.Value < fhrMin {
				fhrMin = point.Value
			}
			if point.Value > fhrMax {
				fhrMax = point.Value
			}
		}

		fhrAvg := fhrSum / float64(len(req.FhrData))
		log.Printf("üìà FHR —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –º–∏–Ω=%.2f, –º–∞–∫—Å=%.2f, —Å—Ä–µ–¥–Ω–µ–µ=%.2f",
			fhrMin, fhrMax, fhrAvg)
	}

	if len(req.UcData) > 0 {
		var ucSum, ucMin, ucMax float64
		ucMin = req.UcData[0].Value
		ucMax = req.UcData[0].Value

		for _, point := range req.UcData {
			ucSum += point.Value
			if point.Value < ucMin {
				ucMin = point.Value
			}
			if point.Value > ucMax {
				ucMax = point.Value
			}
		}

		ucAvg := ucSum / float64(len(req.UcData))
		log.Printf("üìà UC —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –º–∏–Ω=%.2f, –º–∞–∫—Å=%.2f, —Å—Ä–µ–¥–Ω–µ–µ=%.2f",
			ucMin, ucMax, ucAvg)
	}

	// –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)
	recordID := "MED_" + req.SessionId[:8] + "_" + time.Now().Format("20060102150405")

	log.Printf("üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: %s", recordID)
	log.Printf("‚úÖ === –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\n")

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	return &medpb.SaveSessionResponse{
		Success:  true,
		Message:  "–°–µ—Å—Å–∏—è –ö–¢–ì —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã",
		RecordId: recordID,
	}, nil
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func main() {
	log.Println("üè• === –°–ï–†–í–ò–° –ú–ï–î–ò–¶–ò–ù–°–ö–ò–• –ö–ê–†–¢ ===")
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ gRPC —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 50052...")

	// –°–æ–∑–¥–∞–µ–º TCP listener
	lis, err := net.Listen("tcp", ":50052")
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è listener: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º gRPC —Å–µ—Ä–≤–µ—Ä
	grpcServer := grpc.NewServer()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –º–µ–¥–∫–∞—Ä—Ç
	medicalServer := &MedicalRecordsServer{}
	medpb.RegisterMedicalRecordsServiceServer(grpcServer, medicalServer)

	log.Printf("üéØ gRPC —Å–µ—Ä–≤–µ—Ä –º–µ–¥–∫–∞—Ä—Ç —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç :50052")
	log.Println("üìù –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–µ—Å—Å–∏–∏ –ö–¢–ì –æ—Ç CTG Monitor...")
	log.Println("üõë Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		if err := grpcServer.Serve(lis); err != nil {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ gRPC —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	// Graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)
	<-sigChan

	log.Println("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
	grpcServer.GracefulStop()
	log.Println("‚úÖ –°–µ—Ä–≤–∏—Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∫–∞—Ä—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
