package main

import (
	"context"
	"fmt"
	"io"
	"log"
	"os"
	"os/signal"
	"syscall"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	pb "client_grpc/proto" // –∏–º–ø–æ—Ä—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
)

func main() {
	serverAddr := "localhost:50051" // –∞–¥—Ä–µ—Å gRPC-—Å–µ—Ä–≤–µ—Ä–∞
	deviceIDs := []string{}         // [] = –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	dataTypes := []string{          // –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
		"fetal_heart_rate",
		"uterine_contractions",
	}

	//----------------------------------------
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC-—Å–µ—Ä–≤–µ—Ä—É
	//----------------------------------------
	conn, err := grpc.Dial(
		serverAddr,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Fatalf("gRPC dial error: %v", err)
	}
	defer conn.Close()

	client := pb.NewCTGStreamServiceClient(conn)

	//----------------------------------------
	// –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥
	//----------------------------------------
	req := &pb.StreamRequest{
		DeviceIds: deviceIDs,
		DataTypes: dataTypes,
	}

	stream, err := client.StreamCTGData(context.Background(), req)
	if err != nil {
		log.Fatalf("stream error: %v", err)
	}

	log.Printf("üü¢ –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ %s  (Ctrl-C –¥–ª—è –≤—ã—Ö–æ–¥–∞)", serverAddr)

	//----------------------------------------
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
	//----------------------------------------
	go func() {
		for {
			msg, err := stream.Recv()
			if err == io.EOF {
				log.Println("stream closed")
				return
			}
			if err != nil {
				log.Printf("recv error: %v", err)
				return
			}

			val := fmt.Sprintf("%.2f", msg.Value)
			if msg.Value == -1 {
				val = "SIGNAL_LOSS"
			}

			fmt.Printf("[%s] %s  %-13s  %s  (t=%.3fs)\n",
				msg.DeviceId,
				rightPad(msg.DataType, 20),
				val,
				"", // –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
				msg.TimeSec,
			)
		}
	}()

	//----------------------------------------
	// Graceful-shutdown
	//----------------------------------------
	sig := make(chan os.Signal, 1)
	signal.Notify(sig, os.Interrupt, syscall.SIGTERM)
	<-sig
	log.Println("üõë –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// –º–∞–ª–µ–Ω—å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
func rightPad(s string, n int) string {
	if len(s) >= n {
		return s
	}
	return s + string(make([]byte, n-len(s)))
}
