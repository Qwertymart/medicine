package main

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"sort"
	"strconv"
	"sync"
	"time"

	mqtt "github.com/eclipse/paho.mqtt.golang"
)

// MedicalData —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
type MedicalData struct {
	DeviceID  string  `json:"device_id"`
	Timestamp int64   `json:"timestamp"`
	DataType  string  `json:"data_type"`
	Value     float64 `json:"value"`
	Units     string  `json:"units"`
	TimeSec   float64 `json:"time_sec"`
}

// CSVRecord –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
type CSVRecord struct {
	TimeSec float64
	Value   float64
}

var (
	mqttClient mqtt.Client
	logger     *log.Logger
)

var connectHandler mqtt.OnConnectHandler = func(client mqtt.Client) {
	fmt.Println("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
}

var connectLostHandler mqtt.ConnectionLostHandler = func(client mqtt.Client, err error) {
	fmt.Printf("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MQTT –±—Ä–æ–∫–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ: %v\n", err)
}

func initMQTTClient() error {
	opts := mqtt.NewClientOptions()
	opts.AddBroker("tcp://localhost:1883")
	opts.SetClientID(fmt.Sprintf("medical-device-%d", time.Now().Unix()))
	opts.SetAutoReconnect(true)
	opts.SetCleanSession(true)
	opts.OnConnect = connectHandler
	opts.OnConnectionLost = connectLostHandler
	mqttClient = mqtt.NewClient(opts)
	if token := mqttClient.Connect(); token.Wait() && token.Error() != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT: %v", token.Error())
	}
	return nil
}

func publishMQTT(topic string, data MedicalData) error {
	jsonData, err := json.Marshal(data)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %v", err)
	}
	token := mqttClient.Publish(topic, 1, false, jsonData)
	if !token.WaitTimeout(2 * time.Second) {
		return fmt.Errorf("—Ç–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ MQTT")
	}
	return token.Error()
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ ---
func readCSVFile(filename string) ([]CSVRecord, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ %s: %v", filename, err)
	}
	defer file.Close()
	reader := csv.NewReader(file)
	records, err := reader.ReadAll()
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞ %s: %v", filename, err)
	}
	var csvRecords []CSVRecord
	for i, record := range records {
		if i == 0 || len(record) < 2 {
			continue
		}
		timeSec, errT := strconv.ParseFloat(record[0], 64)
		value, errV := strconv.ParseFloat(record[1], 64)
		if errT != nil || errV != nil {
			continue
		}
		csvRecords = append(csvRecords, CSVRecord{TimeSec: timeSec, Value: value})
	}
	return csvRecords, nil
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ –æ–±—â–µ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
func findPairedFiles(bpmDir, uterusDir string) ([][2]string, error) {
	// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
	// –ü—Ä–∏–º–µ—Ä: "20250829-01200001_1.csv" -> –∫–ª—é—á: "20250829-01200001"
	re := regexp.MustCompile(`^(\d{8}-\d{8})_\d+\.csv$`)

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã "–∫–ª—é—á -> –ø–æ–ª–Ω—ã–π –ø—É—Ç—å"
	createFileMap := func(dir string) (map[string]string, error) {
		fileMap := make(map[string]string)
		files, err := ioutil.ReadDir(dir)
		if err != nil {
			return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é %s: %v", dir, err)
		}
		for _, f := range files {
			if !f.IsDir() {
				match := re.FindStringSubmatch(f.Name())
				if match != nil && len(match) > 1 {
					key := match[1]
					fileMap[key] = filepath.Join(dir, f.Name())
				}
			}
		}
		return fileMap, nil
	}

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è bpm –∏ uterus —Ñ–∞–π–ª–æ–≤
	bpmMap, err := createFileMap(bpmDir)
	if err != nil {
		return nil, err
	}
	uterusMap, err := createFileMap(uterusDir)
	if err != nil {
		return nil, err
	}

	// –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –∫–ª—é—á–∏
	var commonKeys []string
	for key := range bpmMap {
		if _, ok := uterusMap[key]; ok {
			commonKeys = append(commonKeys, key)
		}
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
	sort.Strings(commonKeys)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
	var pairedFiles [][2]string
	for _, key := range commonKeys {
		pair := [2]string{bpmMap[key], uterusMap[key]}
		pairedFiles = append(pairedFiles, pair)
	}

	return pairedFiles, nil
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —ç–º—É–ª—è—Ü–∏–∏ ---
func emulateSession(bpmFile, uterusFile, deviceID string, speedMultiplier float64, wg *sync.WaitGroup) {
	defer wg.Done()

	var bpmRecords, uterusRecords []CSVRecord
	var readErr error

	// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —á–∏—Ç–∞–µ–º –æ–±–∞ —Ñ–∞–π–ª–∞
	var readWg sync.WaitGroup
	readWg.Add(2)

	go func() {
		defer readWg.Done()
		bpmRecords, readErr = readCSVFile(bpmFile)
		if readErr != nil {
			log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ BPM %s: %v", bpmFile, readErr)
		}
	}()

	go func() {
		defer readWg.Done()
		uterusRecords, readErr = readCSVFile(uterusFile)
		if readErr != nil {
			log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ Uterus %s: %v", uterusFile, readErr)
		}
	}()

	readWg.Wait()

	if len(bpmRecords) == 0 || len(uterusRecords) == 0 {
		log.Printf("–°–µ–∞–Ω—Å –¥–ª—è %s –ø—Ä–æ–ø—É—â–µ–Ω: –æ–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º.", filepath.Base(bpmFile))
		return
	}

	// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
	numRecords := len(bpmRecords)
	if len(uterusRecords) < numRecords {
		numRecords = len(uterusRecords)
	}

	fmt.Printf("‚úÖ –°–µ–∞–Ω—Å %s –Ω–∞—á–∞—Ç. –ó–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: %d\n", filepath.Base(bpmFile)[:17], numRecords)

	for i := 0; i < numRecords; i++ {
		var wgPublish sync.WaitGroup
		wgPublish.Add(2)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ BPM
		go func(record CSVRecord) {
			defer wgPublish.Done()
			data := MedicalData{
				DeviceID:  deviceID,
				Timestamp: time.Now().UnixNano(),
				DataType:  "fetal_heart_rate",
				Value:     record.Value,
				Units:     "bpm",
				TimeSec:   record.TimeSec,
			}
			if err := publishMQTT("medical/ctg/fhr", data); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ BPM: %v", err)
			}
		}(bpmRecords[i])

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Uterus
		go func(record CSVRecord) {
			defer wgPublish.Done()
			data := MedicalData{
				DeviceID:  deviceID,
				Timestamp: time.Now().UnixNano(),
				DataType:  "uterine_contractions",
				Value:     record.Value,
				Units:     "mmHg",
				TimeSec:   record.TimeSec,
			}
			if err := publishMQTT("medical/ctg/uterus", data); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Uterus: %v", err)
			}
		}(uterusRecords[i])

		wgPublish.Wait()

		// –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
		if i < numRecords-1 {
			sleepSeconds := (bpmRecords[i+1].TimeSec - bpmRecords[i].TimeSec) / speedMultiplier
			if sleepSeconds > 0 {
				time.Sleep(time.Duration(sleepSeconds * float64(time.Second)))
			}
		}
	}
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
func main() {
	logger = log.New(os.Stdout, "[EMULATOR] ", log.LstdFlags)
	fmt.Println("=== –≠–ú–£–õ–Ø–¢–û–† –ú–ï–î–ò–¶–ò–ù–°–ö–û–ì–û –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø v3.1 (–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å–µ–∞–Ω—Å—ã) ===")

	if err := initMQTTClient(); err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MQTT –∫–ª–∏–µ–Ω—Ç: %v", err)
	}
	defer mqttClient.Disconnect(250)

	deviceID := fmt.Sprintf("CTG-MONITOR-%04d", 1+time.Now().Unix()%9998)

	bpmDir := "./data/bpm"
	uterusDir := "./data/uterus"

	pairedFiles, err := findPairedFiles(bpmDir, uterusDir)
	if err != nil || len(pairedFiles) == 0 {
		log.Fatalf("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö %s –∏ %s. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.", bpmDir, uterusDir)
	}

	fmt.Printf("üìÇ –ù–∞–π–¥–µ–Ω–æ %d –ø–∞—Ä–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏.\n\n", len(pairedFiles))

	for { // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ–∞–Ω—Å–æ–≤
		for _, pair := range pairedFiles {
			fmt.Printf("\n==================== –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –°–ï–ê–ù–°–ê –ö–¢–ì (%s) ====================\n", pair[0])

			var wg sync.WaitGroup
			wg.Add(1)

			go emulateSession(pair[0], pair[1], deviceID, 1.0, &wg)
			wg.Wait()

			fmt.Printf("==================== –°–ï–ê–ù–° –ö–¢–ì %s –ó–ê–í–ï–†–®–ï–ù ====================\n", pair[0])
			fmt.Println("‚è∏Ô∏è  –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–µ–∞–Ω—Å–æ–º...")
			time.Sleep(5 * time.Second)
		}
		fmt.Println("\nüèÅ –í—Å–µ —Å–µ–∞–Ω—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –∑–∞–Ω–æ–≤–æ.")
	}
}
