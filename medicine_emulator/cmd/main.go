package main

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"math/rand"
	"os"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"time"

	mqtt "github.com/eclipse/paho.mqtt.golang"
)

// MedicalData —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
type MedicalData struct {
	DeviceID  string  `json:"device_id"`
	Timestamp int64   `json:"timestamp"`
	DataType  string  `json:"data_type"`
	Value     float64 `json:"value"`
	Units     string  `json:"units"`
	TimeSec   float64 `json:"time_sec"`
}

// CSVRecord –¥–ª—è –∑–∞–ø–∏—Å–µ–π —á—Ç–µ–Ω–∏—è CSV
type CSVRecord struct {
	TimeSec float64
	Value   float64
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var (
	mqttClient mqtt.Client
	logger     *log.Logger
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ MQTT
var connectHandler mqtt.OnConnectHandler = func(client mqtt.Client) {
	fmt.Println("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
}

var connectLostHandler mqtt.ConnectionLostHandler = func(client mqtt.Client, err error) {
	fmt.Printf("‚ö† –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MQTT –±—Ä–æ–∫–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ: %v\n", err)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞
func readCSVFile(filename string) ([]CSVRecord, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ %s: %v", filename, err)
	}
	defer file.Close()

	reader := csv.NewReader(file)
	records, err := reader.ReadAll()
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞: %v", err)
	}

	var csvRecords []CSVRecord
	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É)
	for i, record := range records {
		if i == 0 {
			continue
		}

		timeSec, err := strconv.ParseFloat(record[0], 64)
		if err != nil {
			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
			continue
		}

		value, err := strconv.ParseFloat(record[1], 64)
		if err != nil {
			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
			continue
		}

		csvRecords = append(csvRecords, CSVRecord{
			TimeSec: timeSec,
			Value:   value,
		})
	}

	return csvRecords, nil
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
func getFilesFromDir(dirPath string) ([]string, error) {
	files, err := ioutil.ReadDir(dirPath)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é %s: %v", dirPath, err)
	}

	var fileNames []string
	for _, file := range files {
		if !file.IsDir() && strings.HasSuffix(file.Name(), ".csv") {
			fileNames = append(fileNames, filepath.Join(dirPath, file.Name()))
		}
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
	sort.Strings(fileNames)
	return fileNames, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MQTT –∫–ª–∏–µ–Ω—Ç–∞
func initMQTTClient() error {
	broker := "localhost"
	port := 1883
	clientID := fmt.Sprintf("medical-device-%d", time.Now().Unix())

	opts := mqtt.NewClientOptions()
	opts.AddBroker(fmt.Sprintf("tcp://%s:%d", broker, port))
	opts.SetClientID(clientID)
	opts.SetAutoReconnect(true)
	opts.SetCleanSession(true)
	opts.OnConnect = connectHandler
	opts.OnConnectionLost = connectLostHandler

	mqttClient = mqtt.NewClient(opts)
	if token := mqttClient.Connect(); token.Wait() && token.Error() != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT: %v", token.Error())
	}

	return nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ MQTT
func publishMQTT(topic string, data MedicalData) error {
	jsonData, err := json.Marshal(data)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %v", err)
	}

	token := mqttClient.Publish(topic, 1, false, jsonData) // QoS 1
	if !token.WaitTimeout(5 * time.Second) {
		return fmt.Errorf("—Ç–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è")
	}
	if token.Error() != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è: %v", token.Error())
	}
	return nil
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
func emulateDataFromFiles(dir, dataType, units, topic, deviceID string, speedMultiplier float64) {
	files, err := getFilesFromDir(dir)
	if err != nil || len(files) == 0 {
		log.Printf("‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è %s –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ—Ç–æ–∫ '%s' –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.", dir, dataType)
		return
	}

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ü–∏—é –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ %s (–Ω–∞–π–¥–µ–Ω–æ %d —Ñ–∞–π–ª–æ–≤)\n", dir, len(files))

	for { // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
		for _, file := range files {
			records, err := readCSVFile(file)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v", file, err)
				continue
			}

			for i, record := range records {
				data := MedicalData{
					DeviceID:  deviceID,
					Timestamp: time.Now().Unix(),
					DataType:  dataType,
					Value:     record.Value,
					Units:     units,
					TimeSec:   record.TimeSec,
				}

				if err := publishMQTT(topic, data); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
					time.Sleep(1 * time.Second) // –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
					continue
				}

				if i%50 == 0 { // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–µ
					fmt.Printf("üìä [%s] %s: %.2f %s (—Ñ–∞–π–ª: %s)\n",
						dataType, deviceID, data.Value, units, filepath.Base(file))
				}

				if i < len(records)-1 {
					nextTime := records[i+1].TimeSec
					currentTime := record.TimeSec
					sleepDuration := time.Duration((nextTime-currentTime)*1000/speedMultiplier) * time.Millisecond
					if sleepDuration > 0 {
						time.Sleep(sleepDuration)
					}
				}
			}
		}
		fmt.Printf("‚úÖ –¶–∏–∫–ª –¥–ª—è '%s' –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ...\n", dataType)
	}
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
func main() {
	logger = log.New(os.Stdout, "[EMULATOR] ", log.LstdFlags)

	fmt.Println("=== –≠–ú–£–õ–Ø–¢–û–† –ú–ï–î–ò–¶–ò–ù–°–ö–û–ì–û –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø v2.0 ===")
	fmt.Println("–ü—Ä–æ—Ç–æ–∫–æ–ª: MQTT")
	fmt.Println("–†–µ–∂–∏–º: –ß—Ç–µ–Ω–∏–µ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π `data/bpm` –∏ `data/uterus`")

	if err := initMQTTClient(); err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MQTT –∫–ª–∏–µ–Ω—Ç: %v", err)
	}
	defer mqttClient.Disconnect(250)

	deviceID := fmt.Sprintf("CTG-MONITOR-%04d", 1+rand.Intn(9998))

	fmt.Printf("üè• –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %s\n", deviceID)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≥–æ—Ä—É—Ç–∏–Ω–∞—Ö
	go emulateDataFromFiles("./data/bpm", "fetal_heart_rate", "bpm", "medical/ctg/fhr", deviceID, 10.0)
	go emulateDataFromFiles("./data/uterus", "uterine_contractions", "mmHg", "medical/ctg/uterus", deviceID, 10.0)

	fmt.Println("\nüöÄ –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ.")
	fmt.Println("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

	// –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
	select {}
}
